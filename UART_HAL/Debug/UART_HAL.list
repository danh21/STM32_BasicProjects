
UART_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800206c  0800206c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800206c  0800206c  0001206c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002074  08002074  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800207c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000005c  080020d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080020d8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007561  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000123b  00000000  00000000  000275ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00028828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00028e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e89  00000000  00000000  000293d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077ca  00000000  00000000  0003e259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b43  00000000  00000000  00045a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017cc  00000000  00000000  000c95b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800203c 	.word	0x0800203c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	0800203c 	.word	0x0800203c

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b974 	b.w	80004f8 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	468e      	mov	lr, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14d      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000236:	428a      	cmp	r2, r1
 8000238:	4694      	mov	ip, r2
 800023a:	d969      	bls.n	8000310 <__udivmoddi4+0xe8>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b152      	cbz	r2, 8000258 <__udivmoddi4+0x30>
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	f1c2 0120 	rsb	r1, r2, #32
 800024a:	fa20 f101 	lsr.w	r1, r0, r1
 800024e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000252:	ea41 0e03 	orr.w	lr, r1, r3
 8000256:	4094      	lsls	r4, r2
 8000258:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800025c:	0c21      	lsrs	r1, r4, #16
 800025e:	fbbe f6f8 	udiv	r6, lr, r8
 8000262:	fa1f f78c 	uxth.w	r7, ip
 8000266:	fb08 e316 	mls	r3, r8, r6, lr
 800026a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026e:	fb06 f107 	mul.w	r1, r6, r7
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 811f 	bcs.w	80004c0 <__udivmoddi4+0x298>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 811c 	bls.w	80004c0 <__udivmoddi4+0x298>
 8000288:	3e02      	subs	r6, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 f707 	mul.w	r7, r0, r7
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x92>
 80002a4:	eb1c 0404 	adds.w	r4, ip, r4
 80002a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ac:	f080 810a 	bcs.w	80004c4 <__udivmoddi4+0x29c>
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	f240 8107 	bls.w	80004c4 <__udivmoddi4+0x29c>
 80002b6:	4464      	add	r4, ip
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002be:	1be4      	subs	r4, r4, r7
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa4>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xc2>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80ef 	beq.w	80004ba <__udivmoddi4+0x292>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x160>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd4>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80f9 	bhi.w	80004ee <__udivmoddi4+0x2c6>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa4>
 800030a:	e9c5 4e00 	strd	r4, lr, [r5]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa4>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xec>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 8092 	bne.w	8000442 <__udivmoddi4+0x21a>
 800031e:	eba1 010c 	sub.w	r1, r1, ip
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2601      	movs	r6, #1
 800032c:	0c20      	lsrs	r0, r4, #16
 800032e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000332:	fb07 1113 	mls	r1, r7, r3, r1
 8000336:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033a:	fb0e f003 	mul.w	r0, lr, r3
 800033e:	4288      	cmp	r0, r1
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x12c>
 8000342:	eb1c 0101 	adds.w	r1, ip, r1
 8000346:	f103 38ff 	add.w	r8, r3, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x12a>
 800034c:	4288      	cmp	r0, r1
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2c0>
 8000352:	4643      	mov	r3, r8
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb1 f0f7 	udiv	r0, r1, r7
 800035c:	fb07 1110 	mls	r1, r7, r0, r1
 8000360:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x156>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 31ff 	add.w	r1, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x154>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2ca>
 800037c:	4608      	mov	r0, r1
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000386:	e79c      	b.n	80002c2 <__udivmoddi4+0x9a>
 8000388:	f1c6 0720 	rsb	r7, r6, #32
 800038c:	40b3      	lsls	r3, r6
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa20 f407 	lsr.w	r4, r0, r7
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	431c      	orrs	r4, r3
 80003a0:	40f9      	lsrs	r1, r7
 80003a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a6:	fa00 f306 	lsl.w	r3, r0, r6
 80003aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ae:	0c20      	lsrs	r0, r4, #16
 80003b0:	fa1f fe8c 	uxth.w	lr, ip
 80003b4:	fb09 1118 	mls	r1, r9, r8, r1
 80003b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003bc:	fb08 f00e 	mul.w	r0, r8, lr
 80003c0:	4288      	cmp	r0, r1
 80003c2:	fa02 f206 	lsl.w	r2, r2, r6
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b8>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2bc>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2bc>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4461      	add	r1, ip
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e8:	fb09 1110 	mls	r1, r9, r0, r1
 80003ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	458e      	cmp	lr, r1
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1e2>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2b4>
 8000402:	458e      	cmp	lr, r1
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2b4>
 8000406:	3802      	subs	r0, #2
 8000408:	4461      	add	r1, ip
 800040a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040e:	fba0 9402 	umull	r9, r4, r0, r2
 8000412:	eba1 010e 	sub.w	r1, r1, lr
 8000416:	42a1      	cmp	r1, r4
 8000418:	46c8      	mov	r8, r9
 800041a:	46a6      	mov	lr, r4
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x2a4>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x2a0>
 8000420:	b15d      	cbz	r5, 800043a <__udivmoddi4+0x212>
 8000422:	ebb3 0208 	subs.w	r2, r3, r8
 8000426:	eb61 010e 	sbc.w	r1, r1, lr
 800042a:	fa01 f707 	lsl.w	r7, r1, r7
 800042e:	fa22 f306 	lsr.w	r3, r2, r6
 8000432:	40f1      	lsrs	r1, r6
 8000434:	431f      	orrs	r7, r3
 8000436:	e9c5 7100 	strd	r7, r1, [r5]
 800043a:	2600      	movs	r6, #0
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	40d8      	lsrs	r0, r3
 8000448:	fa0c fc02 	lsl.w	ip, ip, r2
 800044c:	fa21 f303 	lsr.w	r3, r1, r3
 8000450:	4091      	lsls	r1, r2
 8000452:	4301      	orrs	r1, r0
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3610 	mls	r6, r7, r0, r3
 8000464:	0c0b      	lsrs	r3, r1, #16
 8000466:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046a:	fb00 f60e 	mul.w	r6, r0, lr
 800046e:	429e      	cmp	r6, r3
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x260>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b8>
 8000480:	429e      	cmp	r6, r3
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b8>
 8000484:	3802      	subs	r0, #2
 8000486:	4463      	add	r3, ip
 8000488:	1b9b      	subs	r3, r3, r6
 800048a:	b289      	uxth	r1, r1
 800048c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000490:	fb07 3316 	mls	r3, r7, r6, r3
 8000494:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000498:	fb06 f30e 	mul.w	r3, r6, lr
 800049c:	428b      	cmp	r3, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x28a>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2b0>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2b0>
 80004ae:	3e02      	subs	r6, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0x104>
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e705      	b.n	80002cc <__udivmoddi4+0xa4>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e3      	b.n	800028c <__udivmoddi4+0x64>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6f8      	b.n	80002ba <__udivmoddi4+0x92>
 80004c8:	454b      	cmp	r3, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f8>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f8>
 80004d8:	4646      	mov	r6, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x28a>
 80004dc:	4620      	mov	r0, r4
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1e2>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x260>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b8>
 80004e8:	3b02      	subs	r3, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x12c>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e709      	b.n	8000306 <__udivmoddi4+0xde>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x156>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 f9d8 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f848 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8d0 	bl	80006ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f8a4 	bl	8000658 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  send_request;
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	2215      	movs	r2, #21
 8000516:	491a      	ldr	r1, [pc, #104]	; (8000580 <main+0x84>)
 8000518:	481a      	ldr	r0, [pc, #104]	; (8000584 <main+0x88>)
 800051a:	f001 f94c 	bl	80017b6 <HAL_UART_Transmit>

	  do {
		  waiting_enter_pass;
 800051e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000522:	2264      	movs	r2, #100	; 0x64
 8000524:	4918      	ldr	r1, [pc, #96]	; (8000588 <main+0x8c>)
 8000526:	4817      	ldr	r0, [pc, #92]	; (8000584 <main+0x88>)
 8000528:	f001 f9d7 	bl	80018da <HAL_UART_Receive>
	  } while (not_yet_enter_pass);
 800052c:	2100      	movs	r1, #0
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <main+0x8c>)
 8000530:	f7ff fe50 	bl	80001d4 <strcmp>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f1      	beq.n	800051e <main+0x22>

	  if (correct_pass) {
 800053a:	4914      	ldr	r1, [pc, #80]	; (800058c <main+0x90>)
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <main+0x8c>)
 800053e:	f7ff fe49 	bl	80001d4 <strcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d107      	bne.n	8000558 <main+0x5c>
		  notify_success;
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	2215      	movs	r2, #21
 800054e:	4910      	ldr	r1, [pc, #64]	; (8000590 <main+0x94>)
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <main+0x88>)
 8000552:	f001 f930 	bl	80017b6 <HAL_UART_Transmit>
		  break;
 8000556:	e010      	b.n	800057a <main+0x7e>
	  }
	  else {
		  notify_fail;
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	2217      	movs	r2, #23
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <main+0x98>)
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x88>)
 8000562:	f001 f928 	bl	80017b6 <HAL_UART_Transmit>
		  reset_buffer;
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0x8c>)
 8000568:	f7ff fe3e 	bl	80001e8 <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x8c>)
 8000574:	f001 fd5a 	bl	800202c <memset>
	  send_request;
 8000578:	e7ca      	b.n	8000510 <main+0x14>
 800057a:	2300      	movs	r3, #0
	  }
	/* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800057c:	4618      	mov	r0, r3
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000
 8000584:	20000078 	.word	0x20000078
 8000588:	200000bc 	.word	0x200000bc
 800058c:	20000048 	.word	0x20000048
 8000590:	20000018 	.word	0x20000018
 8000594:	20000030 	.word	0x20000030

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fd40 	bl	800202c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xb8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SystemClock_Config+0xb8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <SystemClock_Config+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <SystemClock_Config+0xbc>)
 80005e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <SystemClock_Config+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc2d 	bl	8000e6c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f870 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe90 	bl	800135c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f85b 	bl	80006fc <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f001 f844 	bl	800171c <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f82f 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078
 80006a8:	40011000 	.word	0x40011000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x4c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_UART_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_UART_MspInit+0x88>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <HAL_UART_MspInit+0x88>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_UART_MspInit+0x88>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_UART_MspInit+0x88>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_UART_MspInit+0x88>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c4:	2307      	movs	r3, #7
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_UART_MspInit+0x8c>)
 80007d0:	f000 f9c8 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40011000 	.word	0x40011000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f890 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f001 fba9 	bl	8001fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe33 	bl	80004fc <main>
  bx  lr    
 8000896:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000898:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008a4:	0800207c 	.word	0x0800207c
  ldr r2, =_sbss
 80008a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008ac:	20000124 	.word	0x20000124

080008b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_Init+0x40>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_Init+0x40>)
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x40>)
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f90d 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff ff0e 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023c00 	.word	0x40023c00

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f917 	bl	8000b4a <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f8ed 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000050 	.word	0x20000050
 8000950:	20000058 	.word	0x20000058
 8000954:	20000054 	.word	0x20000054

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000058 	.word	0x20000058
 800097c:	20000120 	.word	0x20000120

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000120 	.word	0x20000120

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff8e 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff47 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff5c 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff8e 	bl	8000a50 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffb0 	bl	8000ab8 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	e159      	b.n	8000e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b80:	2201      	movs	r2, #1
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8148 	bne.w	8000e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d130      	bne.n	8000c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	f003 0201 	and.w	r2, r3, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d017      	beq.n	8000c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d123      	bne.n	8000ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	69b9      	ldr	r1, [r7, #24]
 8000ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0203 	and.w	r2, r3, #3
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80a2 	beq.w	8000e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d06:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0x202>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HAL_GPIO_Init+0x2f4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x1fe>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <HAL_GPIO_Init+0x2f8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x1fa>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_GPIO_Init+0x2fc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x1f6>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a45      	ldr	r2, [pc, #276]	; (8000e64 <HAL_GPIO_Init+0x300>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x1f2>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e008      	b.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d56:	2307      	movs	r3, #7
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e004      	b.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e002      	b.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x204>
 8000d66:	2300      	movs	r3, #0
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	f002 0203 	and.w	r2, r2, #3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4093      	lsls	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d78:	4935      	ldr	r1, [pc, #212]	; (8000e50 <HAL_GPIO_Init+0x2ec>)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	f67f aea2 	bls.w	8000b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e267      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d075      	beq.n	8000f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e8a:	4b88      	ldr	r3, [pc, #544]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d00c      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e96:	4b85      	ldr	r3, [pc, #532]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d112      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea2:	4b82      	ldr	r3, [pc, #520]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eae:	d10b      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d05b      	beq.n	8000f74 <HAL_RCC_OscConfig+0x108>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d157      	bne.n	8000f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e242      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d106      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x74>
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e01d      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000eea:	4b70      	ldr	r3, [pc, #448]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6f      	ldr	r2, [pc, #444]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e00b      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000f04:	4b69      	ldr	r3, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a68      	ldr	r2, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a65      	ldr	r2, [pc, #404]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fd2c 	bl	8000980 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fd28 	bl	8000980 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e207      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0xc0>
 8000f4a:	e014      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fd18 	bl	8000980 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fd14 	bl	8000980 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1f3      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b51      	ldr	r3, [pc, #324]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0xe8>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d063      	beq.n	800104a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f82:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d11c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e1c7      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	e03a      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_OscConfig+0x244>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fccd 	bl	8000980 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fcc9 	bl	8000980 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e1a8      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4925      	ldr	r1, [pc, #148]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_RCC_OscConfig+0x244>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fcac 	bl	8000980 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fca8 	bl	8000980 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e187      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d036      	beq.n	80010c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d016      	beq.n	800108c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_RCC_OscConfig+0x248>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fc8c 	bl	8000980 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fc88 	bl	8000980 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e167      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x200>
 800108a:	e01b      	b.n	80010c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_OscConfig+0x248>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fc75 	bl	8000980 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001098:	e00e      	b.n	80010b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109a:	f7ff fc71 	bl	8000980 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d907      	bls.n	80010b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e150      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
 80010ac:	40023800 	.word	0x40023800
 80010b0:	42470000 	.word	0x42470000
 80010b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b8:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ea      	bne.n	800109a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8097 	beq.w	8001200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b7d      	ldr	r3, [pc, #500]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a7c      	ldr	r2, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fe:	2301      	movs	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b77      	ldr	r3, [pc, #476]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a73      	ldr	r2, [pc, #460]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111a:	f7ff fc31 	bl	8000980 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001122:	f7ff fc2d 	bl	8000980 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e10c      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001134:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x2ea>
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6713      	str	r3, [r2, #112]	; 0x70
 8001154:	e01c      	b.n	8001190 <HAL_RCC_OscConfig+0x324>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x30c>
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001162:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6713      	str	r3, [r2, #112]	; 0x70
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6713      	str	r3, [r2, #112]	; 0x70
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0x324>
 8001178:	4b58      	ldr	r3, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d015      	beq.n	80011c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001198:	f7ff fbf2 	bl	8000980 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fbee 	bl	8000980 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0cb      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0ee      	beq.n	80011a0 <HAL_RCC_OscConfig+0x334>
 80011c2:	e014      	b.n	80011ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fbdc 	bl	8000980 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f7ff fbd8 	bl	8000980 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e0b5      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ee      	bne.n	80011cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a38      	ldr	r2, [pc, #224]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a1 	beq.w	800134c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d05c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d141      	bne.n	80012a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fbac 	bl	8000980 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fba8 	bl	8000980 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e087      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	3b01      	subs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	061b      	lsls	r3, r3, #24
 800126e:	491b      	ldr	r1, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb81 	bl	8000980 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fb7d 	bl	8000980 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e05c      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x416>
 80012a0:	e054      	b.n	800134c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb6a 	bl	8000980 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fb66 	bl	8000980 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e045      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x444>
 80012ce:	e03d      	b.n	800134c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e038      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000
 80012e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4ec>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d028      	beq.n	8001348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d121      	bne.n	8001348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d11a      	bne.n	8001348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001318:	4013      	ands	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800131e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001320:	4293      	cmp	r3, r2
 8001322:	d111      	bne.n	8001348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	3b01      	subs	r3, #1
 8001332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001334:	429a      	cmp	r2, r3
 8001336:	d107      	bne.n	8001348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0cc      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d90c      	bls.n	8001398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b8      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494d      	ldr	r1, [pc, #308]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d044      	beq.n	800147c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d119      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d003      	beq.n	800141a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001416:	2b03      	cmp	r3, #3
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e067      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f023 0203 	bic.w	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800144c:	f7ff fa98 	bl	8000980 <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	e00a      	b.n	800146a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f7ff fa94 	bl	8000980 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e04f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 020c 	and.w	r2, r3, #12
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	429a      	cmp	r2, r3
 800147a:	d1eb      	bne.n	8001454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d20c      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e032      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4916      	ldr	r1, [pc, #88]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f821 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	490a      	ldr	r1, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9f8 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00
 8001518:	40023800 	.word	0x40023800
 800151c:	08002054 	.word	0x08002054
 8001520:	20000050 	.word	0x20000050
 8001524:	20000054 	.word	0x20000054

08001528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800152c:	b090      	sub	sp, #64	; 0x40
 800152e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d00d      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x40>
 800154c:	2b08      	cmp	r3, #8
 800154e:	f200 80a1 	bhi.w	8001694 <HAL_RCC_GetSysClockFreq+0x16c>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x34>
 8001556:	2b04      	cmp	r3, #4
 8001558:	d003      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x3a>
 800155a:	e09b      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_GetSysClockFreq+0x184>)
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001560:	e09b      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001566:	e098      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d028      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	099b      	lsrs	r3, r3, #6
 8001584:	2200      	movs	r2, #0
 8001586:	623b      	str	r3, [r7, #32]
 8001588:	627a      	str	r2, [r7, #36]	; 0x24
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001590:	2100      	movs	r1, #0
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001594:	fb03 f201 	mul.w	r2, r3, r1
 8001598:	2300      	movs	r3, #0
 800159a:	fb00 f303 	mul.w	r3, r0, r3
 800159e:	4413      	add	r3, r2
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015a2:	fba0 1202 	umull	r1, r2, r0, r2
 80015a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015a8:	460a      	mov	r2, r1
 80015aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80015ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ae:	4413      	add	r3, r2
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b4:	2200      	movs	r2, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	61fa      	str	r2, [r7, #28]
 80015ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015c2:	f7fe fe19 	bl	80001f8 <__aeabi_uldivmod>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4613      	mov	r3, r2
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ce:	e053      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d0:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	2200      	movs	r2, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	617a      	str	r2, [r7, #20]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015e2:	f04f 0b00 	mov.w	fp, #0
 80015e6:	4652      	mov	r2, sl
 80015e8:	465b      	mov	r3, fp
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	0159      	lsls	r1, r3, #5
 80015f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f8:	0150      	lsls	r0, r2, #5
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001602:	eb63 090b 	sbc.w	r9, r3, fp
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001612:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001616:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800161a:	ebb2 0408 	subs.w	r4, r2, r8
 800161e:	eb63 0509 	sbc.w	r5, r3, r9
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	00eb      	lsls	r3, r5, #3
 800162c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001630:	00e2      	lsls	r2, r4, #3
 8001632:	4614      	mov	r4, r2
 8001634:	461d      	mov	r5, r3
 8001636:	eb14 030a 	adds.w	r3, r4, sl
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	eb45 030b 	adc.w	r3, r5, fp
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800164e:	4629      	mov	r1, r5
 8001650:	028b      	lsls	r3, r1, #10
 8001652:	4621      	mov	r1, r4
 8001654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001658:	4621      	mov	r1, r4
 800165a:	028a      	lsls	r2, r1, #10
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001662:	2200      	movs	r2, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800166c:	f7fe fdc4 	bl	80001f8 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4613      	mov	r3, r2
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	3301      	adds	r3, #1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001692:	e002      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800169c:	4618      	mov	r0, r3
 800169e:	3740      	adds	r7, #64	; 0x40
 80016a0:	46bd      	mov	sp, r7
 80016a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	00f42400 	.word	0x00f42400
 80016b0:	017d7840 	.word	0x017d7840

080016b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000050 	.word	0x20000050

080016cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016d0:	f7ff fff0 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0a9b      	lsrs	r3, r3, #10
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	4903      	ldr	r1, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08002064 	.word	0x08002064

080016f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016f8:	f7ff ffdc 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0b5b      	lsrs	r3, r3, #13
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4903      	ldr	r1, [pc, #12]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	08002064 	.word	0x08002064

0800171c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e03f      	b.n	80017ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff f808 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800175e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f9cb 	bl	8001afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b08a      	sub	sp, #40	; 0x28
 80017ba:	af02      	add	r7, sp, #8
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d17c      	bne.n	80018d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_UART_Transmit+0x2c>
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e075      	b.n	80018d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_UART_Transmit+0x3e>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e06e      	b.n	80018d2 <HAL_UART_Transmit+0x11c>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2221      	movs	r2, #33	; 0x21
 8001806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800180a:	f7ff f8b9 	bl	8000980 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d108      	bne.n	8001838 <HAL_UART_Transmit+0x82>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	e003      	b.n	8001840 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001848:	e02a      	b.n	80018a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f8e2 	bl	8001a1e <UART_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e036      	b.n	80018d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	3302      	adds	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	e007      	b.n	8001892 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	3301      	adds	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1cf      	bne.n	800184a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f8b2 	bl	8001a1e <UART_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e006      	b.n	80018d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b08a      	sub	sp, #40	; 0x28
 80018de:	af02      	add	r7, sp, #8
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4613      	mov	r3, r2
 80018e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	f040 808c 	bne.w	8001a14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <HAL_UART_Receive+0x2e>
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e084      	b.n	8001a16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_UART_Receive+0x40>
 8001916:	2302      	movs	r3, #2
 8001918:	e07d      	b.n	8001a16 <HAL_UART_Receive+0x13c>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2222      	movs	r2, #34	; 0x22
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001936:	f7ff f823 	bl	8000980 <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	88fa      	ldrh	r2, [r7, #6]
 8001940:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001950:	d108      	bne.n	8001964 <HAL_UART_Receive+0x8a>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d104      	bne.n	8001964 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e003      	b.n	800196c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001974:	e043      	b.n	80019fe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2200      	movs	r2, #0
 800197e:	2120      	movs	r1, #32
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f84c 	bl	8001a1e <UART_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e042      	b.n	8001a16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3302      	adds	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e01f      	b.n	80019f0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b8:	d007      	beq.n	80019ca <HAL_UART_Receive+0xf0>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_UART_Receive+0xfe>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e008      	b.n	80019ea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1b6      	bne.n	8001976 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
  }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3720      	adds	r7, #32
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b090      	sub	sp, #64	; 0x40
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a2e:	e050      	b.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a36:	d04c      	beq.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001a3e:	f7fe ff9f 	bl	8000980 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d241      	bcs.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	330c      	adds	r3, #12
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	e853 3f00 	ldrex	r3, [r3]
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	330c      	adds	r3, #12
 8001a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a76:	e841 2300 	strex	r3, r2, [r1]
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e5      	bne.n	8001a4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3314      	adds	r3, #20
 8001a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	e853 3f00 	ldrex	r3, [r3]
 8001a90:	613b      	str	r3, [r7, #16]
   return(result);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aa2:	623a      	str	r2, [r7, #32]
 8001aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa6:	69f9      	ldr	r1, [r7, #28]
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	e841 2300 	strex	r3, r2, [r1]
 8001aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1e5      	bne.n	8001a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e00f      	b.n	8001af2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4013      	ands	r3, r2
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d09f      	beq.n	8001a30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3740      	adds	r7, #64	; 0x40
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b00:	b0c0      	sub	sp, #256	; 0x100
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	ea40 0301 	orr.w	r3, r0, r1
 8001b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b54:	f021 010c 	bic.w	r1, r1, #12
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b62:	430b      	orrs	r3, r1
 8001b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b76:	6999      	ldr	r1, [r3, #24]
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	ea40 0301 	orr.w	r3, r0, r1
 8001b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <UART_SetConfig+0x2cc>)
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d005      	beq.n	8001b9c <UART_SetConfig+0xa0>
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <UART_SetConfig+0x2d0>)
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d104      	bne.n	8001ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b9c:	f7ff fdaa 	bl	80016f4 <HAL_RCC_GetPCLK2Freq>
 8001ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ba4:	e003      	b.n	8001bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ba6:	f7ff fd91 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 8001baa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb8:	f040 810c 	bne.w	8001dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	1891      	adds	r1, r2, r2
 8001bd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bd6:	415b      	adcs	r3, r3
 8001bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bde:	4621      	mov	r1, r4
 8001be0:	eb12 0801 	adds.w	r8, r2, r1
 8001be4:	4629      	mov	r1, r5
 8001be6:	eb43 0901 	adc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	eb49 0303 	adc.w	r3, r9, r3
 8001c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	18db      	adds	r3, r3, r3
 8001c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c30:	4613      	mov	r3, r2
 8001c32:	eb42 0303 	adc.w	r3, r2, r3
 8001c36:	657b      	str	r3, [r7, #84]	; 0x54
 8001c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c40:	f7fe fada 	bl	80001f8 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <UART_SetConfig+0x2d4>)
 8001c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	011c      	lsls	r4, r3, #4
 8001c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	1891      	adds	r1, r2, r2
 8001c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c6c:	415b      	adcs	r3, r3
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c74:	4641      	mov	r1, r8
 8001c76:	eb12 0a01 	adds.w	sl, r2, r1
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c94:	4692      	mov	sl, r2
 8001c96:	469b      	mov	fp, r3
 8001c98:	4643      	mov	r3, r8
 8001c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	18db      	adds	r3, r3, r3
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8001cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cd6:	f7fe fa8f 	bl	80001f8 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <UART_SetConfig+0x2d4>)
 8001ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	1acb      	subs	r3, r1, r3
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <UART_SetConfig+0x2d4>)
 8001cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d04:	441c      	add	r4, r3
 8001d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d18:	4642      	mov	r2, r8
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	1891      	adds	r1, r2, r2
 8001d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d20:	415b      	adcs	r3, r3
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d28:	4641      	mov	r1, r8
 8001d2a:	1851      	adds	r1, r2, r1
 8001d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8001d2e:	4649      	mov	r1, r9
 8001d30:	414b      	adcs	r3, r1
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d40:	4659      	mov	r1, fp
 8001d42:	00cb      	lsls	r3, r1, #3
 8001d44:	4651      	mov	r1, sl
 8001d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	00ca      	lsls	r2, r1, #3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	4642      	mov	r2, r8
 8001d56:	189b      	adds	r3, r3, r2
 8001d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	460a      	mov	r2, r1
 8001d60:	eb42 0303 	adc.w	r3, r2, r3
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	18db      	adds	r3, r3, r3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d82:	4613      	mov	r3, r2
 8001d84:	eb42 0303 	adc.w	r3, r2, r3
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d92:	f7fe fa31 	bl	80001f8 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <UART_SetConfig+0x2d4>)
 8001d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	2164      	movs	r1, #100	; 0x64
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	3332      	adds	r3, #50	; 0x32
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <UART_SetConfig+0x2d4>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	f003 0207 	and.w	r2, r3, #7
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4422      	add	r2, r4
 8001dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dc4:	e105      	b.n	8001fd2 <UART_SetConfig+0x4d6>
 8001dc6:	bf00      	nop
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001de6:	4642      	mov	r2, r8
 8001de8:	464b      	mov	r3, r9
 8001dea:	1891      	adds	r1, r2, r2
 8001dec:	6239      	str	r1, [r7, #32]
 8001dee:	415b      	adcs	r3, r3
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001df6:	4641      	mov	r1, r8
 8001df8:	1854      	adds	r4, r2, r1
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	eb43 0501 	adc.w	r5, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	18e3      	adds	r3, r4, r3
 8001e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e1c:	464b      	mov	r3, r9
 8001e1e:	eb45 0303 	adc.w	r3, r5, r3
 8001e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e42:	4629      	mov	r1, r5
 8001e44:	008b      	lsls	r3, r1, #2
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	008a      	lsls	r2, r1, #2
 8001e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e54:	f7fe f9d0 	bl	80001f8 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <UART_SetConfig+0x4e4>)
 8001e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	011c      	lsls	r4, r3, #4
 8001e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	1891      	adds	r1, r2, r2
 8001e7e:	61b9      	str	r1, [r7, #24]
 8001e80:	415b      	adcs	r3, r3
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e88:	4641      	mov	r1, r8
 8001e8a:	1851      	adds	r1, r2, r1
 8001e8c:	6139      	str	r1, [r7, #16]
 8001e8e:	4649      	mov	r1, r9
 8001e90:	414b      	adcs	r3, r1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	00cb      	lsls	r3, r1, #3
 8001ea4:	4651      	mov	r1, sl
 8001ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eaa:	4651      	mov	r1, sl
 8001eac:	00ca      	lsls	r2, r1, #3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	008b      	lsls	r3, r1, #2
 8001ee4:	4641      	mov	r1, r8
 8001ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eea:	4641      	mov	r1, r8
 8001eec:	008a      	lsls	r2, r1, #2
 8001eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ef2:	f7fe f981 	bl	80001f8 <__aeabi_uldivmod>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <UART_SetConfig+0x4e4>)
 8001efc:	fba3 1302 	umull	r1, r3, r3, r2
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	2164      	movs	r1, #100	; 0x64
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	3332      	adds	r3, #50	; 0x32
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <UART_SetConfig+0x4e4>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1a:	441c      	add	r4, r3
 8001f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f20:	2200      	movs	r2, #0
 8001f22:	673b      	str	r3, [r7, #112]	; 0x70
 8001f24:	677a      	str	r2, [r7, #116]	; 0x74
 8001f26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	1891      	adds	r1, r2, r2
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	415b      	adcs	r3, r3
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	1851      	adds	r1, r2, r1
 8001f3e:	6039      	str	r1, [r7, #0]
 8001f40:	4649      	mov	r1, r9
 8001f42:	414b      	adcs	r3, r1
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f52:	4659      	mov	r1, fp
 8001f54:	00cb      	lsls	r3, r1, #3
 8001f56:	4651      	mov	r1, sl
 8001f58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f5c:	4651      	mov	r1, sl
 8001f5e:	00ca      	lsls	r2, r1, #3
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	4642      	mov	r2, r8
 8001f68:	189b      	adds	r3, r3, r2
 8001f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	460a      	mov	r2, r1
 8001f70:	eb42 0303 	adc.w	r3, r2, r3
 8001f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f80:	667a      	str	r2, [r7, #100]	; 0x64
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001f8e:	4649      	mov	r1, r9
 8001f90:	008b      	lsls	r3, r1, #2
 8001f92:	4641      	mov	r1, r8
 8001f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f98:	4641      	mov	r1, r8
 8001f9a:	008a      	lsls	r2, r1, #2
 8001f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fa0:	f7fe f92a 	bl	80001f8 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <UART_SetConfig+0x4e4>)
 8001faa:	fba3 1302 	umull	r1, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <UART_SetConfig+0x4e4>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4422      	add	r2, r4
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	bf00      	nop
 8001fd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fde:	bf00      	nop
 8001fe0:	51eb851f 	.word	0x51eb851f

08001fe4 <__libc_init_array>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	4d0d      	ldr	r5, [pc, #52]	; (800201c <__libc_init_array+0x38>)
 8001fe8:	4c0d      	ldr	r4, [pc, #52]	; (8002020 <__libc_init_array+0x3c>)
 8001fea:	1b64      	subs	r4, r4, r5
 8001fec:	10a4      	asrs	r4, r4, #2
 8001fee:	2600      	movs	r6, #0
 8001ff0:	42a6      	cmp	r6, r4
 8001ff2:	d109      	bne.n	8002008 <__libc_init_array+0x24>
 8001ff4:	4d0b      	ldr	r5, [pc, #44]	; (8002024 <__libc_init_array+0x40>)
 8001ff6:	4c0c      	ldr	r4, [pc, #48]	; (8002028 <__libc_init_array+0x44>)
 8001ff8:	f000 f820 	bl	800203c <_init>
 8001ffc:	1b64      	subs	r4, r4, r5
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	2600      	movs	r6, #0
 8002002:	42a6      	cmp	r6, r4
 8002004:	d105      	bne.n	8002012 <__libc_init_array+0x2e>
 8002006:	bd70      	pop	{r4, r5, r6, pc}
 8002008:	f855 3b04 	ldr.w	r3, [r5], #4
 800200c:	4798      	blx	r3
 800200e:	3601      	adds	r6, #1
 8002010:	e7ee      	b.n	8001ff0 <__libc_init_array+0xc>
 8002012:	f855 3b04 	ldr.w	r3, [r5], #4
 8002016:	4798      	blx	r3
 8002018:	3601      	adds	r6, #1
 800201a:	e7f2      	b.n	8002002 <__libc_init_array+0x1e>
 800201c:	08002074 	.word	0x08002074
 8002020:	08002074 	.word	0x08002074
 8002024:	08002074 	.word	0x08002074
 8002028:	08002078 	.word	0x08002078

0800202c <memset>:
 800202c:	4402      	add	r2, r0
 800202e:	4603      	mov	r3, r0
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <memset+0xa>
 8002034:	4770      	bx	lr
 8002036:	f803 1b01 	strb.w	r1, [r3], #1
 800203a:	e7f9      	b.n	8002030 <memset+0x4>

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	bf00      	nop
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
