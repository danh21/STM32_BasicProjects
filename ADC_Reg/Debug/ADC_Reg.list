
ADC_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001010  08001010  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001010  08001010  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001010  08001010  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000064  0800107c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800107c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a54  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a8  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00020d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00020e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb89  00000000  00000000  00020ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000eca  00000000  00000000  0002fa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000533e0  00000000  00000000  0003092b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00083d0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000608  00000000  00000000  00083d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000fb4 	.word	0x08000fb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08000fb4 	.word	0x08000fb4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SystemClock_config>:

/*
 * Initialize system clock
 * */
void SystemClock_config()
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <SystemClock_config+0x68>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <SystemClock_config+0x68>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 8000290:	bf00      	nop
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <SystemClock_config+0x68>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= (1<<15);
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <SystemClock_config+0x6c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a12      	ldr	r2, [pc, #72]	; (80002ec <SystemClock_config+0x6c>)
 80002a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a8:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <SystemClock_config+0x70>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <SystemClock_config+0x70>)
 80002b0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002b4:	f043 0305 	orr.w	r3, r3, #5
 80002b8:	6013      	str	r3, [r2, #0]

	// Clock configuration register for setting
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <SystemClock_config+0x68>)
 80002bc:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <SystemClock_config+0x68>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	6093      	str	r3, [r2, #8]
	while ( (RCC->CFGR & (1<<2)) || (RCC->CFGR & (1<<3)) );
 80002c2:	bf00      	nop
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <SystemClock_config+0x68>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f9      	bne.n	80002c4 <SystemClock_config+0x44>
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <SystemClock_config+0x68>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	f003 0308 	and.w	r3, r3, #8
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1f3      	bne.n	80002c4 <SystemClock_config+0x44>
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40007000 	.word	0x40007000
 80002f0:	40023c00 	.word	0x40023c00

080002f4 <Timer1_init>:

/*
 * Initialize Timer 1
 * */
void Timer1_init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
	uint32_t F_timer, prescaler;

	// F_timer = f_PCLK / (PSC + 1)
	F_timer = 1 / T_timer;
 80002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fe:	607b      	str	r3, [r7, #4]
	prescaler = f_PCLK / F_timer - 1;
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <Timer1_init+0x5c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	fbb2 f3f3 	udiv	r3, r2, r3
 8000308:	3b01      	subs	r3, #1
 800030a:	603b      	str	r3, [r7, #0]

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 		// TIM1 clock enable
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <Timer1_init+0x60>)
 800030e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <Timer1_init+0x60>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC |= prescaler;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <Timer1_init+0x64>)
 800031a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800031c:	490e      	ldr	r1, [pc, #56]	; (8000358 <Timer1_init+0x64>)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	4313      	orrs	r3, r2
 8000322:	628b      	str	r3, [r1, #40]	; 0x28

	TIM1->ARR = AutoReload;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <Timer1_init+0x64>)
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= TIM_CR1_CEN;					// Counter enable
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <Timer1_init+0x64>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <Timer1_init+0x64>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1<<4);						// Counter used as up counter
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <Timer1_init+0x64>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <Timer1_init+0x64>)
 800033e:	f023 0310 	bic.w	r3, r3, #16
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	00f42400 	.word	0x00f42400
 8000354:	40023800 	.word	0x40023800
 8000358:	40010000 	.word	0x40010000

0800035c <delay_ms>:

/*
 * delay by ms
 * */
void delay_ms(int ms)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <delay_ms+0x28>)
 8000366:	2200      	movs	r2, #0
 8000368:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM1->CNT < ms);
 800036a:	bf00      	nop
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <delay_ms+0x28>)
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	429a      	cmp	r2, r3
 8000374:	d3fa      	bcc.n	800036c <delay_ms+0x10>
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40010000 	.word	0x40010000

08000388 <USART1_init>:



/* Initializing USART */
void USART1_init()
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
	uint32_t USART_DIV, DIV_Mantissa, DIV_Fraction;

	RCC->APB2ENR |= (1<<4); 					// USART1 clock enable
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <USART1_init+0x80>)
 8000390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <USART1_init+0x80>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	6453      	str	r3, [r2, #68]	; 0x44

	USART1->CR1 |= (1<<3); 						// transmit enable
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <USART1_init+0x84>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <USART1_init+0x84>)
 80003a0:	f043 0308 	orr.w	r3, r3, #8
 80003a4:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1<<13);						// USART enable
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <USART1_init+0x84>)
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <USART1_init+0x84>)
 80003ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003b0:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1<<12);					// 1 Start bit, 8 Data bits, n Stop bit
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <USART1_init+0x84>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <USART1_init+0x84>)
 80003b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003bc:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1<<10);					// no parity
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <USART1_init+0x84>)
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <USART1_init+0x84>)
 80003c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003c8:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(2<<12);					// 1 stop bit
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <USART1_init+0x84>)
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	4a0f      	ldr	r2, [pc, #60]	; (800040c <USART1_init+0x84>)
 80003d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003d4:	6113      	str	r3, [r2, #16]
	/*
	 * USART_DIV = PCLK1 / (baud * 16)
	 * 			 = 16,000,000 / (9600 * 16)
	 * 			 = 104.16667
	 * */
	USART_DIV = f_PCLK / (baudrate * 16);
 80003d6:	2368      	movs	r3, #104	; 0x68
 80003d8:	60fb      	str	r3, [r7, #12]
	DIV_Mantissa = USART_DIV;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	60bb      	str	r3, [r7, #8]
	DIV_Fraction = (USART_DIV - DIV_Mantissa) * 16;
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	011b      	lsls	r3, r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
	USART1->BRR |= (DIV_Mantissa<<4) | (DIV_Fraction);
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <USART1_init+0x84>)
 80003ea:	689a      	ldr	r2, [r3, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	0119      	lsls	r1, r3, #4
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	430b      	orrs	r3, r1
 80003f4:	4905      	ldr	r1, [pc, #20]	; (800040c <USART1_init+0x84>)
 80003f6:	4313      	orrs	r3, r2
 80003f8:	608b      	str	r3, [r1, #8]
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800
 800040c:	40011000 	.word	0x40011000

08000410 <USART1_sendData>:



/* transmit sequence data */
void USART1_sendData(char *p)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	while (*p != '\0')
 8000418:	e00d      	b.n	8000436 <USART1_sendData+0x26>
	{
		USART1->DR = *p;						// load data
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	781a      	ldrb	r2, [r3, #0]
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <USART1_sendData+0x3c>)
 8000420:	605a      	str	r2, [r3, #4]
		while ((USART1->SR & (1<<6)) == 0);		// wait until Transmission is complete
 8000422:	bf00      	nop
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <USART1_sendData+0x3c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f9      	beq.n	8000424 <USART1_sendData+0x14>
		p++;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
	while (*p != '\0')
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1ed      	bne.n	800041a <USART1_sendData+0xa>
	}
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40011000 	.word	0x40011000

08000450 <ADC1_Init>:
#define ADC_H_



void ADC1_Init()
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<8);		// enable ADC1 clock
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <ADC1_Init+0x70>)
 8000456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000458:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <ADC1_Init+0x70>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045e:	6453      	str	r3, [r2, #68]	; 0x44

	ADC->CCR &= ~(3<<16);  		 // PCLK2 divided by 2
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <ADC1_Init+0x74>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <ADC1_Init+0x74>)
 8000466:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800046a:	6053      	str	r3, [r2, #4]

	ADC1->CR1 |= (1<<24);		// resolution 10-bit
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <ADC1_Init+0x78>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <ADC1_Init+0x78>)
 8000472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000476:	6053      	str	r3, [r2, #4]
	//	ADC1->CR1 |= (1<<5);		// Enable interrupt mode for EOC

	ADC1->CR2 |= (1<<0);		// adc enable respectively
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <ADC1_Init+0x78>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <ADC1_Init+0x78>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<1);		// continuous conversion mode
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <ADC1_Init+0x78>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <ADC1_Init+0x78>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<10);		// EOC after each conversion
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <ADC1_Init+0x78>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <ADC1_Init+0x78>)
 8000496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800049a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1<<11);		// data alignment right
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <ADC1_Init+0x78>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <ADC1_Init+0x78>)
 80004a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004a6:	6093      	str	r3, [r2, #8]

	ADC1->SMPR2 &= ~(7<<3);		// 3 clock cycle polling, 1th channel
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <ADC1_Init+0x78>)
 80004aa:	691b      	ldr	r3, [r3, #16]
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <ADC1_Init+0x78>)
 80004ae:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80004b2:	6113      	str	r3, [r2, #16]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40012300 	.word	0x40012300
 80004c8:	40012000 	.word	0x40012000

080004cc <ADC1_Start_Polling>:



void ADC1_Start_Polling(int channel)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	ADC1->SQR3 |= (channel<<0);		// polling for 1 channel, keep 1 channel in the sequence at a time
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <ADC1_Start_Polling+0x3c>)
 80004d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	490b      	ldr	r1, [pc, #44]	; (8000508 <ADC1_Start_Polling+0x3c>)
 80004dc:	4313      	orrs	r3, r2
 80004de:	634b      	str	r3, [r1, #52]	; 0x34
	ADC1->CR2 |= (1<<30);			// start regular conversion
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <ADC1_Start_Polling+0x3c>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a08      	ldr	r2, [pc, #32]	; (8000508 <ADC1_Start_Polling+0x3c>)
 80004e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004ea:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & (1<<1)));	// wait for EOC flag to set
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <ADC1_Start_Polling+0x3c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ADC1_Start_Polling+0x22>
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40012000 	.word	0x40012000

0800050c <ADC1_Read>:



uint32_t ADC1_Read()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	return ADC1->DR;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <ADC1_Read+0x14>)
 8000512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40012000 	.word	0x40012000

08000524 <main>:
void GPIO_init();



int main()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	SystemClock_config();
 8000528:	f7ff feaa 	bl	8000280 <SystemClock_config>
	GPIO_init();
 800052c:	f000 f824 	bl	8000578 <GPIO_init>
	Timer1_init();
 8000530:	f7ff fee0 	bl	80002f4 <Timer1_init>
	USART1_init();
 8000534:	f7ff ff28 	bl	8000388 <USART1_init>
	ADC1_Init();
 8000538:	f7ff ff8a 	bl	8000450 <ADC1_Init>

	while(1)
	{
		ADC1_Start_Polling(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ffc5 	bl	80004cc <ADC1_Start_Polling>
		ADC1_data = ADC1_Read();
 8000542:	f7ff ffe3 	bl	800050c <ADC1_Read>
 8000546:	4603      	mov	r3, r0
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x48>)
 800054a:	6013      	str	r3, [r2, #0]
		sprintf(result, "ADC value = %d\r\n", ADC1_data);
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <main+0x48>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4907      	ldr	r1, [pc, #28]	; (8000570 <main+0x4c>)
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x50>)
 8000556:	f000 f8bf 	bl	80006d8 <siprintf>
		USART1_sendData(result);
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x50>)
 800055c:	f7ff ff58 	bl	8000410 <USART1_sendData>
		delay_ms(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f7ff fefa 	bl	800035c <delay_ms>
		ADC1_Start_Polling(1);
 8000568:	e7e8      	b.n	800053c <main+0x18>
 800056a:	bf00      	nop
 800056c:	20000080 	.word	0x20000080
 8000570:	08000fcc 	.word	0x08000fcc
 8000574:	20000084 	.word	0x20000084

08000578 <GPIO_init>:



/* Initializing GPIO */
void GPIO_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);				// enable GPIOA clock
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <GPIO_init+0x44>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <GPIO_init+0x44>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (2<<18) | (3<<2);	// alternate function for PA9, analog for PA1
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <GPIO_init+0x48>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <GPIO_init+0x48>)
 800058e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= (2<<18) | (2<<2);	// high speed for PA1, PA9
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <GPIO_init+0x48>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <GPIO_init+0x48>)
 800059e:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
 80005a2:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] |= (7<<4);			// USART mode for PA9
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <GPIO_init+0x48>)
 80005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <GPIO_init+0x48>)
 80005aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80005ae:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f000 f846 	bl	8000684 <__errno>
 80005f8:	4603      	mov	r3, r0
 80005fa:	220c      	movs	r2, #12
 80005fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20018000 	.word	0x20018000
 8000624:	00000400 	.word	0x00000400
 8000628:	20000098 	.word	0x20000098
 800062c:	200000b0 	.word	0x200000b0

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f817 	bl	8000690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff ff5f 	bl	8000524 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000674:	08001018 	.word	0x08001018
  ldr r2, =_sbss
 8000678:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800067c:	200000ac 	.word	0x200000ac

08000680 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC_IRQHandler>
	...

08000684 <__errno>:
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <__errno+0x8>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000

08000690 <__libc_init_array>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	4d0d      	ldr	r5, [pc, #52]	; (80006c8 <__libc_init_array+0x38>)
 8000694:	4c0d      	ldr	r4, [pc, #52]	; (80006cc <__libc_init_array+0x3c>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	2600      	movs	r6, #0
 800069c:	42a6      	cmp	r6, r4
 800069e:	d109      	bne.n	80006b4 <__libc_init_array+0x24>
 80006a0:	4d0b      	ldr	r5, [pc, #44]	; (80006d0 <__libc_init_array+0x40>)
 80006a2:	4c0c      	ldr	r4, [pc, #48]	; (80006d4 <__libc_init_array+0x44>)
 80006a4:	f000 fc86 	bl	8000fb4 <_init>
 80006a8:	1b64      	subs	r4, r4, r5
 80006aa:	10a4      	asrs	r4, r4, #2
 80006ac:	2600      	movs	r6, #0
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d105      	bne.n	80006be <__libc_init_array+0x2e>
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b8:	4798      	blx	r3
 80006ba:	3601      	adds	r6, #1
 80006bc:	e7ee      	b.n	800069c <__libc_init_array+0xc>
 80006be:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c2:	4798      	blx	r3
 80006c4:	3601      	adds	r6, #1
 80006c6:	e7f2      	b.n	80006ae <__libc_init_array+0x1e>
 80006c8:	08001010 	.word	0x08001010
 80006cc:	08001010 	.word	0x08001010
 80006d0:	08001010 	.word	0x08001010
 80006d4:	08001014 	.word	0x08001014

080006d8 <siprintf>:
 80006d8:	b40e      	push	{r1, r2, r3}
 80006da:	b500      	push	{lr}
 80006dc:	b09c      	sub	sp, #112	; 0x70
 80006de:	ab1d      	add	r3, sp, #116	; 0x74
 80006e0:	9002      	str	r0, [sp, #8]
 80006e2:	9006      	str	r0, [sp, #24]
 80006e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <siprintf+0x38>)
 80006ea:	9107      	str	r1, [sp, #28]
 80006ec:	9104      	str	r1, [sp, #16]
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <siprintf+0x3c>)
 80006f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80006f4:	9105      	str	r1, [sp, #20]
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	a902      	add	r1, sp, #8
 80006fc:	f000 f868 	bl	80007d0 <_svfiprintf_r>
 8000700:	9b02      	ldr	r3, [sp, #8]
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	b01c      	add	sp, #112	; 0x70
 8000708:	f85d eb04 	ldr.w	lr, [sp], #4
 800070c:	b003      	add	sp, #12
 800070e:	4770      	bx	lr
 8000710:	20000000 	.word	0x20000000
 8000714:	ffff0208 	.word	0xffff0208

08000718 <__ssputs_r>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	688e      	ldr	r6, [r1, #8]
 800071e:	429e      	cmp	r6, r3
 8000720:	4682      	mov	sl, r0
 8000722:	460c      	mov	r4, r1
 8000724:	4690      	mov	r8, r2
 8000726:	461f      	mov	r7, r3
 8000728:	d838      	bhi.n	800079c <__ssputs_r+0x84>
 800072a:	898a      	ldrh	r2, [r1, #12]
 800072c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000730:	d032      	beq.n	8000798 <__ssputs_r+0x80>
 8000732:	6825      	ldr	r5, [r4, #0]
 8000734:	6909      	ldr	r1, [r1, #16]
 8000736:	eba5 0901 	sub.w	r9, r5, r1
 800073a:	6965      	ldr	r5, [r4, #20]
 800073c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000744:	3301      	adds	r3, #1
 8000746:	444b      	add	r3, r9
 8000748:	106d      	asrs	r5, r5, #1
 800074a:	429d      	cmp	r5, r3
 800074c:	bf38      	it	cc
 800074e:	461d      	movcc	r5, r3
 8000750:	0553      	lsls	r3, r2, #21
 8000752:	d531      	bpl.n	80007b8 <__ssputs_r+0xa0>
 8000754:	4629      	mov	r1, r5
 8000756:	f000 fb63 	bl	8000e20 <_malloc_r>
 800075a:	4606      	mov	r6, r0
 800075c:	b950      	cbnz	r0, 8000774 <__ssputs_r+0x5c>
 800075e:	230c      	movs	r3, #12
 8000760:	f8ca 3000 	str.w	r3, [sl]
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	81a3      	strh	r3, [r4, #12]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000774:	6921      	ldr	r1, [r4, #16]
 8000776:	464a      	mov	r2, r9
 8000778:	f000 fabe 	bl	8000cf8 <memcpy>
 800077c:	89a3      	ldrh	r3, [r4, #12]
 800077e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000786:	81a3      	strh	r3, [r4, #12]
 8000788:	6126      	str	r6, [r4, #16]
 800078a:	6165      	str	r5, [r4, #20]
 800078c:	444e      	add	r6, r9
 800078e:	eba5 0509 	sub.w	r5, r5, r9
 8000792:	6026      	str	r6, [r4, #0]
 8000794:	60a5      	str	r5, [r4, #8]
 8000796:	463e      	mov	r6, r7
 8000798:	42be      	cmp	r6, r7
 800079a:	d900      	bls.n	800079e <__ssputs_r+0x86>
 800079c:	463e      	mov	r6, r7
 800079e:	6820      	ldr	r0, [r4, #0]
 80007a0:	4632      	mov	r2, r6
 80007a2:	4641      	mov	r1, r8
 80007a4:	f000 fab6 	bl	8000d14 <memmove>
 80007a8:	68a3      	ldr	r3, [r4, #8]
 80007aa:	1b9b      	subs	r3, r3, r6
 80007ac:	60a3      	str	r3, [r4, #8]
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	4433      	add	r3, r6
 80007b2:	6023      	str	r3, [r4, #0]
 80007b4:	2000      	movs	r0, #0
 80007b6:	e7db      	b.n	8000770 <__ssputs_r+0x58>
 80007b8:	462a      	mov	r2, r5
 80007ba:	f000 fba5 	bl	8000f08 <_realloc_r>
 80007be:	4606      	mov	r6, r0
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d1e1      	bne.n	8000788 <__ssputs_r+0x70>
 80007c4:	6921      	ldr	r1, [r4, #16]
 80007c6:	4650      	mov	r0, sl
 80007c8:	f000 fabe 	bl	8000d48 <_free_r>
 80007cc:	e7c7      	b.n	800075e <__ssputs_r+0x46>
	...

080007d0 <_svfiprintf_r>:
 80007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007d4:	4698      	mov	r8, r3
 80007d6:	898b      	ldrh	r3, [r1, #12]
 80007d8:	061b      	lsls	r3, r3, #24
 80007da:	b09d      	sub	sp, #116	; 0x74
 80007dc:	4607      	mov	r7, r0
 80007de:	460d      	mov	r5, r1
 80007e0:	4614      	mov	r4, r2
 80007e2:	d50e      	bpl.n	8000802 <_svfiprintf_r+0x32>
 80007e4:	690b      	ldr	r3, [r1, #16]
 80007e6:	b963      	cbnz	r3, 8000802 <_svfiprintf_r+0x32>
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	f000 fb19 	bl	8000e20 <_malloc_r>
 80007ee:	6028      	str	r0, [r5, #0]
 80007f0:	6128      	str	r0, [r5, #16]
 80007f2:	b920      	cbnz	r0, 80007fe <_svfiprintf_r+0x2e>
 80007f4:	230c      	movs	r3, #12
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	e0d1      	b.n	80009a2 <_svfiprintf_r+0x1d2>
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	616b      	str	r3, [r5, #20]
 8000802:	2300      	movs	r3, #0
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
 8000806:	2320      	movs	r3, #32
 8000808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800080c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000810:	2330      	movs	r3, #48	; 0x30
 8000812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80009bc <_svfiprintf_r+0x1ec>
 8000816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800081a:	f04f 0901 	mov.w	r9, #1
 800081e:	4623      	mov	r3, r4
 8000820:	469a      	mov	sl, r3
 8000822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000826:	b10a      	cbz	r2, 800082c <_svfiprintf_r+0x5c>
 8000828:	2a25      	cmp	r2, #37	; 0x25
 800082a:	d1f9      	bne.n	8000820 <_svfiprintf_r+0x50>
 800082c:	ebba 0b04 	subs.w	fp, sl, r4
 8000830:	d00b      	beq.n	800084a <_svfiprintf_r+0x7a>
 8000832:	465b      	mov	r3, fp
 8000834:	4622      	mov	r2, r4
 8000836:	4629      	mov	r1, r5
 8000838:	4638      	mov	r0, r7
 800083a:	f7ff ff6d 	bl	8000718 <__ssputs_r>
 800083e:	3001      	adds	r0, #1
 8000840:	f000 80aa 	beq.w	8000998 <_svfiprintf_r+0x1c8>
 8000844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000846:	445a      	add	r2, fp
 8000848:	9209      	str	r2, [sp, #36]	; 0x24
 800084a:	f89a 3000 	ldrb.w	r3, [sl]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f000 80a2 	beq.w	8000998 <_svfiprintf_r+0x1c8>
 8000854:	2300      	movs	r3, #0
 8000856:	f04f 32ff 	mov.w	r2, #4294967295
 800085a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800085e:	f10a 0a01 	add.w	sl, sl, #1
 8000862:	9304      	str	r3, [sp, #16]
 8000864:	9307      	str	r3, [sp, #28]
 8000866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800086a:	931a      	str	r3, [sp, #104]	; 0x68
 800086c:	4654      	mov	r4, sl
 800086e:	2205      	movs	r2, #5
 8000870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000874:	4851      	ldr	r0, [pc, #324]	; (80009bc <_svfiprintf_r+0x1ec>)
 8000876:	f7ff fcb3 	bl	80001e0 <memchr>
 800087a:	9a04      	ldr	r2, [sp, #16]
 800087c:	b9d8      	cbnz	r0, 80008b6 <_svfiprintf_r+0xe6>
 800087e:	06d0      	lsls	r0, r2, #27
 8000880:	bf44      	itt	mi
 8000882:	2320      	movmi	r3, #32
 8000884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000888:	0711      	lsls	r1, r2, #28
 800088a:	bf44      	itt	mi
 800088c:	232b      	movmi	r3, #43	; 0x2b
 800088e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000892:	f89a 3000 	ldrb.w	r3, [sl]
 8000896:	2b2a      	cmp	r3, #42	; 0x2a
 8000898:	d015      	beq.n	80008c6 <_svfiprintf_r+0xf6>
 800089a:	9a07      	ldr	r2, [sp, #28]
 800089c:	4654      	mov	r4, sl
 800089e:	2000      	movs	r0, #0
 80008a0:	f04f 0c0a 	mov.w	ip, #10
 80008a4:	4621      	mov	r1, r4
 80008a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008aa:	3b30      	subs	r3, #48	; 0x30
 80008ac:	2b09      	cmp	r3, #9
 80008ae:	d94e      	bls.n	800094e <_svfiprintf_r+0x17e>
 80008b0:	b1b0      	cbz	r0, 80008e0 <_svfiprintf_r+0x110>
 80008b2:	9207      	str	r2, [sp, #28]
 80008b4:	e014      	b.n	80008e0 <_svfiprintf_r+0x110>
 80008b6:	eba0 0308 	sub.w	r3, r0, r8
 80008ba:	fa09 f303 	lsl.w	r3, r9, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	9304      	str	r3, [sp, #16]
 80008c2:	46a2      	mov	sl, r4
 80008c4:	e7d2      	b.n	800086c <_svfiprintf_r+0x9c>
 80008c6:	9b03      	ldr	r3, [sp, #12]
 80008c8:	1d19      	adds	r1, r3, #4
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	9103      	str	r1, [sp, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bfbb      	ittet	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	f042 0202 	orrlt.w	r2, r2, #2
 80008d8:	9307      	strge	r3, [sp, #28]
 80008da:	9307      	strlt	r3, [sp, #28]
 80008dc:	bfb8      	it	lt
 80008de:	9204      	strlt	r2, [sp, #16]
 80008e0:	7823      	ldrb	r3, [r4, #0]
 80008e2:	2b2e      	cmp	r3, #46	; 0x2e
 80008e4:	d10c      	bne.n	8000900 <_svfiprintf_r+0x130>
 80008e6:	7863      	ldrb	r3, [r4, #1]
 80008e8:	2b2a      	cmp	r3, #42	; 0x2a
 80008ea:	d135      	bne.n	8000958 <_svfiprintf_r+0x188>
 80008ec:	9b03      	ldr	r3, [sp, #12]
 80008ee:	1d1a      	adds	r2, r3, #4
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	9203      	str	r2, [sp, #12]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bfb8      	it	lt
 80008f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80008fc:	3402      	adds	r4, #2
 80008fe:	9305      	str	r3, [sp, #20]
 8000900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80009cc <_svfiprintf_r+0x1fc>
 8000904:	7821      	ldrb	r1, [r4, #0]
 8000906:	2203      	movs	r2, #3
 8000908:	4650      	mov	r0, sl
 800090a:	f7ff fc69 	bl	80001e0 <memchr>
 800090e:	b140      	cbz	r0, 8000922 <_svfiprintf_r+0x152>
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	eba0 000a 	sub.w	r0, r0, sl
 8000916:	fa03 f000 	lsl.w	r0, r3, r0
 800091a:	9b04      	ldr	r3, [sp, #16]
 800091c:	4303      	orrs	r3, r0
 800091e:	3401      	adds	r4, #1
 8000920:	9304      	str	r3, [sp, #16]
 8000922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000926:	4826      	ldr	r0, [pc, #152]	; (80009c0 <_svfiprintf_r+0x1f0>)
 8000928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800092c:	2206      	movs	r2, #6
 800092e:	f7ff fc57 	bl	80001e0 <memchr>
 8000932:	2800      	cmp	r0, #0
 8000934:	d038      	beq.n	80009a8 <_svfiprintf_r+0x1d8>
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <_svfiprintf_r+0x1f4>)
 8000938:	bb1b      	cbnz	r3, 8000982 <_svfiprintf_r+0x1b2>
 800093a:	9b03      	ldr	r3, [sp, #12]
 800093c:	3307      	adds	r3, #7
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	3308      	adds	r3, #8
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000948:	4433      	add	r3, r6
 800094a:	9309      	str	r3, [sp, #36]	; 0x24
 800094c:	e767      	b.n	800081e <_svfiprintf_r+0x4e>
 800094e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000952:	460c      	mov	r4, r1
 8000954:	2001      	movs	r0, #1
 8000956:	e7a5      	b.n	80008a4 <_svfiprintf_r+0xd4>
 8000958:	2300      	movs	r3, #0
 800095a:	3401      	adds	r4, #1
 800095c:	9305      	str	r3, [sp, #20]
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 0c0a 	mov.w	ip, #10
 8000964:	4620      	mov	r0, r4
 8000966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800096a:	3a30      	subs	r2, #48	; 0x30
 800096c:	2a09      	cmp	r2, #9
 800096e:	d903      	bls.n	8000978 <_svfiprintf_r+0x1a8>
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0c5      	beq.n	8000900 <_svfiprintf_r+0x130>
 8000974:	9105      	str	r1, [sp, #20]
 8000976:	e7c3      	b.n	8000900 <_svfiprintf_r+0x130>
 8000978:	fb0c 2101 	mla	r1, ip, r1, r2
 800097c:	4604      	mov	r4, r0
 800097e:	2301      	movs	r3, #1
 8000980:	e7f0      	b.n	8000964 <_svfiprintf_r+0x194>
 8000982:	ab03      	add	r3, sp, #12
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	462a      	mov	r2, r5
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <_svfiprintf_r+0x1f8>)
 800098a:	a904      	add	r1, sp, #16
 800098c:	4638      	mov	r0, r7
 800098e:	f3af 8000 	nop.w
 8000992:	1c42      	adds	r2, r0, #1
 8000994:	4606      	mov	r6, r0
 8000996:	d1d6      	bne.n	8000946 <_svfiprintf_r+0x176>
 8000998:	89ab      	ldrh	r3, [r5, #12]
 800099a:	065b      	lsls	r3, r3, #25
 800099c:	f53f af2c 	bmi.w	80007f8 <_svfiprintf_r+0x28>
 80009a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80009a2:	b01d      	add	sp, #116	; 0x74
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a8:	ab03      	add	r3, sp, #12
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	462a      	mov	r2, r5
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <_svfiprintf_r+0x1f8>)
 80009b0:	a904      	add	r1, sp, #16
 80009b2:	4638      	mov	r0, r7
 80009b4:	f000 f87a 	bl	8000aac <_printf_i>
 80009b8:	e7eb      	b.n	8000992 <_svfiprintf_r+0x1c2>
 80009ba:	bf00      	nop
 80009bc:	08000fdd 	.word	0x08000fdd
 80009c0:	08000fe7 	.word	0x08000fe7
 80009c4:	00000000 	.word	0x00000000
 80009c8:	08000719 	.word	0x08000719
 80009cc:	08000fe3 	.word	0x08000fe3

080009d0 <_printf_common>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	4616      	mov	r6, r2
 80009d6:	4699      	mov	r9, r3
 80009d8:	688a      	ldr	r2, [r1, #8]
 80009da:	690b      	ldr	r3, [r1, #16]
 80009dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	bfb8      	it	lt
 80009e4:	4613      	movlt	r3, r2
 80009e6:	6033      	str	r3, [r6, #0]
 80009e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80009ec:	4607      	mov	r7, r0
 80009ee:	460c      	mov	r4, r1
 80009f0:	b10a      	cbz	r2, 80009f6 <_printf_common+0x26>
 80009f2:	3301      	adds	r3, #1
 80009f4:	6033      	str	r3, [r6, #0]
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	0699      	lsls	r1, r3, #26
 80009fa:	bf42      	ittt	mi
 80009fc:	6833      	ldrmi	r3, [r6, #0]
 80009fe:	3302      	addmi	r3, #2
 8000a00:	6033      	strmi	r3, [r6, #0]
 8000a02:	6825      	ldr	r5, [r4, #0]
 8000a04:	f015 0506 	ands.w	r5, r5, #6
 8000a08:	d106      	bne.n	8000a18 <_printf_common+0x48>
 8000a0a:	f104 0a19 	add.w	sl, r4, #25
 8000a0e:	68e3      	ldr	r3, [r4, #12]
 8000a10:	6832      	ldr	r2, [r6, #0]
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	42ab      	cmp	r3, r5
 8000a16:	dc26      	bgt.n	8000a66 <_printf_common+0x96>
 8000a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000a1c:	1e13      	subs	r3, r2, #0
 8000a1e:	6822      	ldr	r2, [r4, #0]
 8000a20:	bf18      	it	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	0692      	lsls	r2, r2, #26
 8000a26:	d42b      	bmi.n	8000a80 <_printf_common+0xb0>
 8000a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000a2c:	4649      	mov	r1, r9
 8000a2e:	4638      	mov	r0, r7
 8000a30:	47c0      	blx	r8
 8000a32:	3001      	adds	r0, #1
 8000a34:	d01e      	beq.n	8000a74 <_printf_common+0xa4>
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	68e5      	ldr	r5, [r4, #12]
 8000a3a:	6832      	ldr	r2, [r6, #0]
 8000a3c:	f003 0306 	and.w	r3, r3, #6
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	bf08      	it	eq
 8000a44:	1aad      	subeq	r5, r5, r2
 8000a46:	68a3      	ldr	r3, [r4, #8]
 8000a48:	6922      	ldr	r2, [r4, #16]
 8000a4a:	bf0c      	ite	eq
 8000a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000a50:	2500      	movne	r5, #0
 8000a52:	4293      	cmp	r3, r2
 8000a54:	bfc4      	itt	gt
 8000a56:	1a9b      	subgt	r3, r3, r2
 8000a58:	18ed      	addgt	r5, r5, r3
 8000a5a:	2600      	movs	r6, #0
 8000a5c:	341a      	adds	r4, #26
 8000a5e:	42b5      	cmp	r5, r6
 8000a60:	d11a      	bne.n	8000a98 <_printf_common+0xc8>
 8000a62:	2000      	movs	r0, #0
 8000a64:	e008      	b.n	8000a78 <_printf_common+0xa8>
 8000a66:	2301      	movs	r3, #1
 8000a68:	4652      	mov	r2, sl
 8000a6a:	4649      	mov	r1, r9
 8000a6c:	4638      	mov	r0, r7
 8000a6e:	47c0      	blx	r8
 8000a70:	3001      	adds	r0, #1
 8000a72:	d103      	bne.n	8000a7c <_printf_common+0xac>
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	3501      	adds	r5, #1
 8000a7e:	e7c6      	b.n	8000a0e <_printf_common+0x3e>
 8000a80:	18e1      	adds	r1, r4, r3
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	2030      	movs	r0, #48	; 0x30
 8000a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000a8a:	4422      	add	r2, r4
 8000a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000a94:	3302      	adds	r3, #2
 8000a96:	e7c7      	b.n	8000a28 <_printf_common+0x58>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4622      	mov	r2, r4
 8000a9c:	4649      	mov	r1, r9
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	47c0      	blx	r8
 8000aa2:	3001      	adds	r0, #1
 8000aa4:	d0e6      	beq.n	8000a74 <_printf_common+0xa4>
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7d9      	b.n	8000a5e <_printf_common+0x8e>
	...

08000aac <_printf_i>:
 8000aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	7e0f      	ldrb	r7, [r1, #24]
 8000ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ab4:	2f78      	cmp	r7, #120	; 0x78
 8000ab6:	4691      	mov	r9, r2
 8000ab8:	4680      	mov	r8, r0
 8000aba:	460c      	mov	r4, r1
 8000abc:	469a      	mov	sl, r3
 8000abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ac2:	d807      	bhi.n	8000ad4 <_printf_i+0x28>
 8000ac4:	2f62      	cmp	r7, #98	; 0x62
 8000ac6:	d80a      	bhi.n	8000ade <_printf_i+0x32>
 8000ac8:	2f00      	cmp	r7, #0
 8000aca:	f000 80d8 	beq.w	8000c7e <_printf_i+0x1d2>
 8000ace:	2f58      	cmp	r7, #88	; 0x58
 8000ad0:	f000 80a3 	beq.w	8000c1a <_printf_i+0x16e>
 8000ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000adc:	e03a      	b.n	8000b54 <_printf_i+0xa8>
 8000ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ae2:	2b15      	cmp	r3, #21
 8000ae4:	d8f6      	bhi.n	8000ad4 <_printf_i+0x28>
 8000ae6:	a101      	add	r1, pc, #4	; (adr r1, 8000aec <_printf_i+0x40>)
 8000ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000aec:	08000b45 	.word	0x08000b45
 8000af0:	08000b59 	.word	0x08000b59
 8000af4:	08000ad5 	.word	0x08000ad5
 8000af8:	08000ad5 	.word	0x08000ad5
 8000afc:	08000ad5 	.word	0x08000ad5
 8000b00:	08000ad5 	.word	0x08000ad5
 8000b04:	08000b59 	.word	0x08000b59
 8000b08:	08000ad5 	.word	0x08000ad5
 8000b0c:	08000ad5 	.word	0x08000ad5
 8000b10:	08000ad5 	.word	0x08000ad5
 8000b14:	08000ad5 	.word	0x08000ad5
 8000b18:	08000c65 	.word	0x08000c65
 8000b1c:	08000b89 	.word	0x08000b89
 8000b20:	08000c47 	.word	0x08000c47
 8000b24:	08000ad5 	.word	0x08000ad5
 8000b28:	08000ad5 	.word	0x08000ad5
 8000b2c:	08000c87 	.word	0x08000c87
 8000b30:	08000ad5 	.word	0x08000ad5
 8000b34:	08000b89 	.word	0x08000b89
 8000b38:	08000ad5 	.word	0x08000ad5
 8000b3c:	08000ad5 	.word	0x08000ad5
 8000b40:	08000c4f 	.word	0x08000c4f
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	1d1a      	adds	r2, r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	602a      	str	r2, [r5, #0]
 8000b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000b54:	2301      	movs	r3, #1
 8000b56:	e0a3      	b.n	8000ca0 <_printf_i+0x1f4>
 8000b58:	6820      	ldr	r0, [r4, #0]
 8000b5a:	6829      	ldr	r1, [r5, #0]
 8000b5c:	0606      	lsls	r6, r0, #24
 8000b5e:	f101 0304 	add.w	r3, r1, #4
 8000b62:	d50a      	bpl.n	8000b7a <_printf_i+0xce>
 8000b64:	680e      	ldr	r6, [r1, #0]
 8000b66:	602b      	str	r3, [r5, #0]
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	da03      	bge.n	8000b74 <_printf_i+0xc8>
 8000b6c:	232d      	movs	r3, #45	; 0x2d
 8000b6e:	4276      	negs	r6, r6
 8000b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000b74:	485e      	ldr	r0, [pc, #376]	; (8000cf0 <_printf_i+0x244>)
 8000b76:	230a      	movs	r3, #10
 8000b78:	e019      	b.n	8000bae <_printf_i+0x102>
 8000b7a:	680e      	ldr	r6, [r1, #0]
 8000b7c:	602b      	str	r3, [r5, #0]
 8000b7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000b82:	bf18      	it	ne
 8000b84:	b236      	sxthne	r6, r6
 8000b86:	e7ef      	b.n	8000b68 <_printf_i+0xbc>
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	6820      	ldr	r0, [r4, #0]
 8000b8c:	1d19      	adds	r1, r3, #4
 8000b8e:	6029      	str	r1, [r5, #0]
 8000b90:	0601      	lsls	r1, r0, #24
 8000b92:	d501      	bpl.n	8000b98 <_printf_i+0xec>
 8000b94:	681e      	ldr	r6, [r3, #0]
 8000b96:	e002      	b.n	8000b9e <_printf_i+0xf2>
 8000b98:	0646      	lsls	r6, r0, #25
 8000b9a:	d5fb      	bpl.n	8000b94 <_printf_i+0xe8>
 8000b9c:	881e      	ldrh	r6, [r3, #0]
 8000b9e:	4854      	ldr	r0, [pc, #336]	; (8000cf0 <_printf_i+0x244>)
 8000ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8000ba2:	bf0c      	ite	eq
 8000ba4:	2308      	moveq	r3, #8
 8000ba6:	230a      	movne	r3, #10
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000bae:	6865      	ldr	r5, [r4, #4]
 8000bb0:	60a5      	str	r5, [r4, #8]
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	bfa2      	ittt	ge
 8000bb6:	6821      	ldrge	r1, [r4, #0]
 8000bb8:	f021 0104 	bicge.w	r1, r1, #4
 8000bbc:	6021      	strge	r1, [r4, #0]
 8000bbe:	b90e      	cbnz	r6, 8000bc4 <_printf_i+0x118>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d04d      	beq.n	8000c60 <_printf_i+0x1b4>
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000bca:	fb03 6711 	mls	r7, r3, r1, r6
 8000bce:	5dc7      	ldrb	r7, [r0, r7]
 8000bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000bd4:	4637      	mov	r7, r6
 8000bd6:	42bb      	cmp	r3, r7
 8000bd8:	460e      	mov	r6, r1
 8000bda:	d9f4      	bls.n	8000bc6 <_printf_i+0x11a>
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d10b      	bne.n	8000bf8 <_printf_i+0x14c>
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	07de      	lsls	r6, r3, #31
 8000be4:	d508      	bpl.n	8000bf8 <_printf_i+0x14c>
 8000be6:	6923      	ldr	r3, [r4, #16]
 8000be8:	6861      	ldr	r1, [r4, #4]
 8000bea:	4299      	cmp	r1, r3
 8000bec:	bfde      	ittt	le
 8000bee:	2330      	movle	r3, #48	; 0x30
 8000bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000bf8:	1b52      	subs	r2, r2, r5
 8000bfa:	6122      	str	r2, [r4, #16]
 8000bfc:	f8cd a000 	str.w	sl, [sp]
 8000c00:	464b      	mov	r3, r9
 8000c02:	aa03      	add	r2, sp, #12
 8000c04:	4621      	mov	r1, r4
 8000c06:	4640      	mov	r0, r8
 8000c08:	f7ff fee2 	bl	80009d0 <_printf_common>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d14c      	bne.n	8000caa <_printf_i+0x1fe>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	b004      	add	sp, #16
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	4835      	ldr	r0, [pc, #212]	; (8000cf0 <_printf_i+0x244>)
 8000c1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000c20:	6829      	ldr	r1, [r5, #0]
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8000c28:	6029      	str	r1, [r5, #0]
 8000c2a:	061d      	lsls	r5, r3, #24
 8000c2c:	d514      	bpl.n	8000c58 <_printf_i+0x1ac>
 8000c2e:	07df      	lsls	r7, r3, #31
 8000c30:	bf44      	itt	mi
 8000c32:	f043 0320 	orrmi.w	r3, r3, #32
 8000c36:	6023      	strmi	r3, [r4, #0]
 8000c38:	b91e      	cbnz	r6, 8000c42 <_printf_i+0x196>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	f023 0320 	bic.w	r3, r3, #32
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	2310      	movs	r3, #16
 8000c44:	e7b0      	b.n	8000ba8 <_printf_i+0xfc>
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	2378      	movs	r3, #120	; 0x78
 8000c50:	4828      	ldr	r0, [pc, #160]	; (8000cf4 <_printf_i+0x248>)
 8000c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c56:	e7e3      	b.n	8000c20 <_printf_i+0x174>
 8000c58:	0659      	lsls	r1, r3, #25
 8000c5a:	bf48      	it	mi
 8000c5c:	b2b6      	uxthmi	r6, r6
 8000c5e:	e7e6      	b.n	8000c2e <_printf_i+0x182>
 8000c60:	4615      	mov	r5, r2
 8000c62:	e7bb      	b.n	8000bdc <_printf_i+0x130>
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	6826      	ldr	r6, [r4, #0]
 8000c68:	6961      	ldr	r1, [r4, #20]
 8000c6a:	1d18      	adds	r0, r3, #4
 8000c6c:	6028      	str	r0, [r5, #0]
 8000c6e:	0635      	lsls	r5, r6, #24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	d501      	bpl.n	8000c78 <_printf_i+0x1cc>
 8000c74:	6019      	str	r1, [r3, #0]
 8000c76:	e002      	b.n	8000c7e <_printf_i+0x1d2>
 8000c78:	0670      	lsls	r0, r6, #25
 8000c7a:	d5fb      	bpl.n	8000c74 <_printf_i+0x1c8>
 8000c7c:	8019      	strh	r1, [r3, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	6123      	str	r3, [r4, #16]
 8000c82:	4615      	mov	r5, r2
 8000c84:	e7ba      	b.n	8000bfc <_printf_i+0x150>
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	1d1a      	adds	r2, r3, #4
 8000c8a:	602a      	str	r2, [r5, #0]
 8000c8c:	681d      	ldr	r5, [r3, #0]
 8000c8e:	6862      	ldr	r2, [r4, #4]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4628      	mov	r0, r5
 8000c94:	f7ff faa4 	bl	80001e0 <memchr>
 8000c98:	b108      	cbz	r0, 8000c9e <_printf_i+0x1f2>
 8000c9a:	1b40      	subs	r0, r0, r5
 8000c9c:	6060      	str	r0, [r4, #4]
 8000c9e:	6863      	ldr	r3, [r4, #4]
 8000ca0:	6123      	str	r3, [r4, #16]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ca8:	e7a8      	b.n	8000bfc <_printf_i+0x150>
 8000caa:	6923      	ldr	r3, [r4, #16]
 8000cac:	462a      	mov	r2, r5
 8000cae:	4649      	mov	r1, r9
 8000cb0:	4640      	mov	r0, r8
 8000cb2:	47d0      	blx	sl
 8000cb4:	3001      	adds	r0, #1
 8000cb6:	d0ab      	beq.n	8000c10 <_printf_i+0x164>
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	079b      	lsls	r3, r3, #30
 8000cbc:	d413      	bmi.n	8000ce6 <_printf_i+0x23a>
 8000cbe:	68e0      	ldr	r0, [r4, #12]
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	bfb8      	it	lt
 8000cc6:	4618      	movlt	r0, r3
 8000cc8:	e7a4      	b.n	8000c14 <_printf_i+0x168>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4632      	mov	r2, r6
 8000cce:	4649      	mov	r1, r9
 8000cd0:	4640      	mov	r0, r8
 8000cd2:	47d0      	blx	sl
 8000cd4:	3001      	adds	r0, #1
 8000cd6:	d09b      	beq.n	8000c10 <_printf_i+0x164>
 8000cd8:	3501      	adds	r5, #1
 8000cda:	68e3      	ldr	r3, [r4, #12]
 8000cdc:	9903      	ldr	r1, [sp, #12]
 8000cde:	1a5b      	subs	r3, r3, r1
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	dcf2      	bgt.n	8000cca <_printf_i+0x21e>
 8000ce4:	e7eb      	b.n	8000cbe <_printf_i+0x212>
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	f104 0619 	add.w	r6, r4, #25
 8000cec:	e7f5      	b.n	8000cda <_printf_i+0x22e>
 8000cee:	bf00      	nop
 8000cf0:	08000fee 	.word	0x08000fee
 8000cf4:	08000fff 	.word	0x08000fff

08000cf8 <memcpy>:
 8000cf8:	440a      	add	r2, r1
 8000cfa:	4291      	cmp	r1, r2
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d100      	bne.n	8000d04 <memcpy+0xc>
 8000d02:	4770      	bx	lr
 8000d04:	b510      	push	{r4, lr}
 8000d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d1f9      	bne.n	8000d06 <memcpy+0xe>
 8000d12:	bd10      	pop	{r4, pc}

08000d14 <memmove>:
 8000d14:	4288      	cmp	r0, r1
 8000d16:	b510      	push	{r4, lr}
 8000d18:	eb01 0402 	add.w	r4, r1, r2
 8000d1c:	d902      	bls.n	8000d24 <memmove+0x10>
 8000d1e:	4284      	cmp	r4, r0
 8000d20:	4623      	mov	r3, r4
 8000d22:	d807      	bhi.n	8000d34 <memmove+0x20>
 8000d24:	1e43      	subs	r3, r0, #1
 8000d26:	42a1      	cmp	r1, r4
 8000d28:	d008      	beq.n	8000d3c <memmove+0x28>
 8000d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d32:	e7f8      	b.n	8000d26 <memmove+0x12>
 8000d34:	4402      	add	r2, r0
 8000d36:	4601      	mov	r1, r0
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	d100      	bne.n	8000d3e <memmove+0x2a>
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d46:	e7f7      	b.n	8000d38 <memmove+0x24>

08000d48 <_free_r>:
 8000d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d044      	beq.n	8000dd8 <_free_r+0x90>
 8000d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d52:	9001      	str	r0, [sp, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f1a1 0404 	sub.w	r4, r1, #4
 8000d5a:	bfb8      	it	lt
 8000d5c:	18e4      	addlt	r4, r4, r3
 8000d5e:	f000 f913 	bl	8000f88 <__malloc_lock>
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <_free_r+0x94>)
 8000d64:	9801      	ldr	r0, [sp, #4]
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	b933      	cbnz	r3, 8000d78 <_free_r+0x30>
 8000d6a:	6063      	str	r3, [r4, #4]
 8000d6c:	6014      	str	r4, [r2, #0]
 8000d6e:	b003      	add	sp, #12
 8000d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d74:	f000 b90e 	b.w	8000f94 <__malloc_unlock>
 8000d78:	42a3      	cmp	r3, r4
 8000d7a:	d908      	bls.n	8000d8e <_free_r+0x46>
 8000d7c:	6825      	ldr	r5, [r4, #0]
 8000d7e:	1961      	adds	r1, r4, r5
 8000d80:	428b      	cmp	r3, r1
 8000d82:	bf01      	itttt	eq
 8000d84:	6819      	ldreq	r1, [r3, #0]
 8000d86:	685b      	ldreq	r3, [r3, #4]
 8000d88:	1949      	addeq	r1, r1, r5
 8000d8a:	6021      	streq	r1, [r4, #0]
 8000d8c:	e7ed      	b.n	8000d6a <_free_r+0x22>
 8000d8e:	461a      	mov	r2, r3
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	b10b      	cbz	r3, 8000d98 <_free_r+0x50>
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d9fa      	bls.n	8000d8e <_free_r+0x46>
 8000d98:	6811      	ldr	r1, [r2, #0]
 8000d9a:	1855      	adds	r5, r2, r1
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	d10b      	bne.n	8000db8 <_free_r+0x70>
 8000da0:	6824      	ldr	r4, [r4, #0]
 8000da2:	4421      	add	r1, r4
 8000da4:	1854      	adds	r4, r2, r1
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	6011      	str	r1, [r2, #0]
 8000daa:	d1e0      	bne.n	8000d6e <_free_r+0x26>
 8000dac:	681c      	ldr	r4, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	6053      	str	r3, [r2, #4]
 8000db2:	4421      	add	r1, r4
 8000db4:	6011      	str	r1, [r2, #0]
 8000db6:	e7da      	b.n	8000d6e <_free_r+0x26>
 8000db8:	d902      	bls.n	8000dc0 <_free_r+0x78>
 8000dba:	230c      	movs	r3, #12
 8000dbc:	6003      	str	r3, [r0, #0]
 8000dbe:	e7d6      	b.n	8000d6e <_free_r+0x26>
 8000dc0:	6825      	ldr	r5, [r4, #0]
 8000dc2:	1961      	adds	r1, r4, r5
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	bf04      	itt	eq
 8000dc8:	6819      	ldreq	r1, [r3, #0]
 8000dca:	685b      	ldreq	r3, [r3, #4]
 8000dcc:	6063      	str	r3, [r4, #4]
 8000dce:	bf04      	itt	eq
 8000dd0:	1949      	addeq	r1, r1, r5
 8000dd2:	6021      	streq	r1, [r4, #0]
 8000dd4:	6054      	str	r4, [r2, #4]
 8000dd6:	e7ca      	b.n	8000d6e <_free_r+0x26>
 8000dd8:	b003      	add	sp, #12
 8000dda:	bd30      	pop	{r4, r5, pc}
 8000ddc:	2000009c 	.word	0x2000009c

08000de0 <sbrk_aligned>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	4e0e      	ldr	r6, [pc, #56]	; (8000e1c <sbrk_aligned+0x3c>)
 8000de4:	460c      	mov	r4, r1
 8000de6:	6831      	ldr	r1, [r6, #0]
 8000de8:	4605      	mov	r5, r0
 8000dea:	b911      	cbnz	r1, 8000df2 <sbrk_aligned+0x12>
 8000dec:	f000 f8bc 	bl	8000f68 <_sbrk_r>
 8000df0:	6030      	str	r0, [r6, #0]
 8000df2:	4621      	mov	r1, r4
 8000df4:	4628      	mov	r0, r5
 8000df6:	f000 f8b7 	bl	8000f68 <_sbrk_r>
 8000dfa:	1c43      	adds	r3, r0, #1
 8000dfc:	d00a      	beq.n	8000e14 <sbrk_aligned+0x34>
 8000dfe:	1cc4      	adds	r4, r0, #3
 8000e00:	f024 0403 	bic.w	r4, r4, #3
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	d007      	beq.n	8000e18 <sbrk_aligned+0x38>
 8000e08:	1a21      	subs	r1, r4, r0
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f000 f8ac 	bl	8000f68 <_sbrk_r>
 8000e10:	3001      	adds	r0, #1
 8000e12:	d101      	bne.n	8000e18 <sbrk_aligned+0x38>
 8000e14:	f04f 34ff 	mov.w	r4, #4294967295
 8000e18:	4620      	mov	r0, r4
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	200000a0 	.word	0x200000a0

08000e20 <_malloc_r>:
 8000e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e24:	1ccd      	adds	r5, r1, #3
 8000e26:	f025 0503 	bic.w	r5, r5, #3
 8000e2a:	3508      	adds	r5, #8
 8000e2c:	2d0c      	cmp	r5, #12
 8000e2e:	bf38      	it	cc
 8000e30:	250c      	movcc	r5, #12
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	4607      	mov	r7, r0
 8000e36:	db01      	blt.n	8000e3c <_malloc_r+0x1c>
 8000e38:	42a9      	cmp	r1, r5
 8000e3a:	d905      	bls.n	8000e48 <_malloc_r+0x28>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	2600      	movs	r6, #0
 8000e42:	4630      	mov	r0, r6
 8000e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e48:	4e2e      	ldr	r6, [pc, #184]	; (8000f04 <_malloc_r+0xe4>)
 8000e4a:	f000 f89d 	bl	8000f88 <__malloc_lock>
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	461c      	mov	r4, r3
 8000e52:	bb34      	cbnz	r4, 8000ea2 <_malloc_r+0x82>
 8000e54:	4629      	mov	r1, r5
 8000e56:	4638      	mov	r0, r7
 8000e58:	f7ff ffc2 	bl	8000de0 <sbrk_aligned>
 8000e5c:	1c43      	adds	r3, r0, #1
 8000e5e:	4604      	mov	r4, r0
 8000e60:	d14d      	bne.n	8000efe <_malloc_r+0xde>
 8000e62:	6834      	ldr	r4, [r6, #0]
 8000e64:	4626      	mov	r6, r4
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d140      	bne.n	8000eec <_malloc_r+0xcc>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	4638      	mov	r0, r7
 8000e70:	eb04 0803 	add.w	r8, r4, r3
 8000e74:	f000 f878 	bl	8000f68 <_sbrk_r>
 8000e78:	4580      	cmp	r8, r0
 8000e7a:	d13a      	bne.n	8000ef2 <_malloc_r+0xd2>
 8000e7c:	6821      	ldr	r1, [r4, #0]
 8000e7e:	3503      	adds	r5, #3
 8000e80:	1a6d      	subs	r5, r5, r1
 8000e82:	f025 0503 	bic.w	r5, r5, #3
 8000e86:	3508      	adds	r5, #8
 8000e88:	2d0c      	cmp	r5, #12
 8000e8a:	bf38      	it	cc
 8000e8c:	250c      	movcc	r5, #12
 8000e8e:	4629      	mov	r1, r5
 8000e90:	4638      	mov	r0, r7
 8000e92:	f7ff ffa5 	bl	8000de0 <sbrk_aligned>
 8000e96:	3001      	adds	r0, #1
 8000e98:	d02b      	beq.n	8000ef2 <_malloc_r+0xd2>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	442b      	add	r3, r5
 8000e9e:	6023      	str	r3, [r4, #0]
 8000ea0:	e00e      	b.n	8000ec0 <_malloc_r+0xa0>
 8000ea2:	6822      	ldr	r2, [r4, #0]
 8000ea4:	1b52      	subs	r2, r2, r5
 8000ea6:	d41e      	bmi.n	8000ee6 <_malloc_r+0xc6>
 8000ea8:	2a0b      	cmp	r2, #11
 8000eaa:	d916      	bls.n	8000eda <_malloc_r+0xba>
 8000eac:	1961      	adds	r1, r4, r5
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	6025      	str	r5, [r4, #0]
 8000eb2:	bf18      	it	ne
 8000eb4:	6059      	strne	r1, [r3, #4]
 8000eb6:	6863      	ldr	r3, [r4, #4]
 8000eb8:	bf08      	it	eq
 8000eba:	6031      	streq	r1, [r6, #0]
 8000ebc:	5162      	str	r2, [r4, r5]
 8000ebe:	604b      	str	r3, [r1, #4]
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f104 060b 	add.w	r6, r4, #11
 8000ec6:	f000 f865 	bl	8000f94 <__malloc_unlock>
 8000eca:	f026 0607 	bic.w	r6, r6, #7
 8000ece:	1d23      	adds	r3, r4, #4
 8000ed0:	1af2      	subs	r2, r6, r3
 8000ed2:	d0b6      	beq.n	8000e42 <_malloc_r+0x22>
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	50a3      	str	r3, [r4, r2]
 8000ed8:	e7b3      	b.n	8000e42 <_malloc_r+0x22>
 8000eda:	6862      	ldr	r2, [r4, #4]
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	bf0c      	ite	eq
 8000ee0:	6032      	streq	r2, [r6, #0]
 8000ee2:	605a      	strne	r2, [r3, #4]
 8000ee4:	e7ec      	b.n	8000ec0 <_malloc_r+0xa0>
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	6864      	ldr	r4, [r4, #4]
 8000eea:	e7b2      	b.n	8000e52 <_malloc_r+0x32>
 8000eec:	4634      	mov	r4, r6
 8000eee:	6876      	ldr	r6, [r6, #4]
 8000ef0:	e7b9      	b.n	8000e66 <_malloc_r+0x46>
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	f000 f84c 	bl	8000f94 <__malloc_unlock>
 8000efc:	e7a1      	b.n	8000e42 <_malloc_r+0x22>
 8000efe:	6025      	str	r5, [r4, #0]
 8000f00:	e7de      	b.n	8000ec0 <_malloc_r+0xa0>
 8000f02:	bf00      	nop
 8000f04:	2000009c 	.word	0x2000009c

08000f08 <_realloc_r>:
 8000f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	4614      	mov	r4, r2
 8000f10:	460e      	mov	r6, r1
 8000f12:	b921      	cbnz	r1, 8000f1e <_realloc_r+0x16>
 8000f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f18:	4611      	mov	r1, r2
 8000f1a:	f7ff bf81 	b.w	8000e20 <_malloc_r>
 8000f1e:	b92a      	cbnz	r2, 8000f2c <_realloc_r+0x24>
 8000f20:	f7ff ff12 	bl	8000d48 <_free_r>
 8000f24:	4625      	mov	r5, r4
 8000f26:	4628      	mov	r0, r5
 8000f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f2c:	f000 f838 	bl	8000fa0 <_malloc_usable_size_r>
 8000f30:	4284      	cmp	r4, r0
 8000f32:	4607      	mov	r7, r0
 8000f34:	d802      	bhi.n	8000f3c <_realloc_r+0x34>
 8000f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f3a:	d812      	bhi.n	8000f62 <_realloc_r+0x5a>
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	4640      	mov	r0, r8
 8000f40:	f7ff ff6e 	bl	8000e20 <_malloc_r>
 8000f44:	4605      	mov	r5, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d0ed      	beq.n	8000f26 <_realloc_r+0x1e>
 8000f4a:	42bc      	cmp	r4, r7
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	4631      	mov	r1, r6
 8000f50:	bf28      	it	cs
 8000f52:	463a      	movcs	r2, r7
 8000f54:	f7ff fed0 	bl	8000cf8 <memcpy>
 8000f58:	4631      	mov	r1, r6
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	f7ff fef4 	bl	8000d48 <_free_r>
 8000f60:	e7e1      	b.n	8000f26 <_realloc_r+0x1e>
 8000f62:	4635      	mov	r5, r6
 8000f64:	e7df      	b.n	8000f26 <_realloc_r+0x1e>
	...

08000f68 <_sbrk_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4d06      	ldr	r5, [pc, #24]	; (8000f84 <_sbrk_r+0x1c>)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	602b      	str	r3, [r5, #0]
 8000f74:	f7ff fb26 	bl	80005c4 <_sbrk>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	d102      	bne.n	8000f82 <_sbrk_r+0x1a>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	b103      	cbz	r3, 8000f82 <_sbrk_r+0x1a>
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200000a4 	.word	0x200000a4

08000f88 <__malloc_lock>:
 8000f88:	4801      	ldr	r0, [pc, #4]	; (8000f90 <__malloc_lock+0x8>)
 8000f8a:	f000 b811 	b.w	8000fb0 <__retarget_lock_acquire_recursive>
 8000f8e:	bf00      	nop
 8000f90:	200000a8 	.word	0x200000a8

08000f94 <__malloc_unlock>:
 8000f94:	4801      	ldr	r0, [pc, #4]	; (8000f9c <__malloc_unlock+0x8>)
 8000f96:	f000 b80c 	b.w	8000fb2 <__retarget_lock_release_recursive>
 8000f9a:	bf00      	nop
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <_malloc_usable_size_r>:
 8000fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fa4:	1f18      	subs	r0, r3, #4
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bfbc      	itt	lt
 8000faa:	580b      	ldrlt	r3, [r1, r0]
 8000fac:	18c0      	addlt	r0, r0, r3
 8000fae:	4770      	bx	lr

08000fb0 <__retarget_lock_acquire_recursive>:
 8000fb0:	4770      	bx	lr

08000fb2 <__retarget_lock_release_recursive>:
 8000fb2:	4770      	bx	lr

08000fb4 <_init>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	bf00      	nop
 8000fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fba:	bc08      	pop	{r3}
 8000fbc:	469e      	mov	lr, r3
 8000fbe:	4770      	bx	lr

08000fc0 <_fini>:
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc2:	bf00      	nop
 8000fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc6:	bc08      	pop	{r3}
 8000fc8:	469e      	mov	lr, r3
 8000fca:	4770      	bx	lr
