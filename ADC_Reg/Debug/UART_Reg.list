
UART_Reg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004dc  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006b3  00000000  00000000  0001050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000185  00000000  00000000  00010bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dacf  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006f1  00000000  00000000  0001e8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ee20  00000000  00000000  0001efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006de00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000138  00000000  00000000  0006de50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b0 	.word	0x080004b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004b0 	.word	0x080004b0

080001d4 <SystemClock_config>:

/*
 * Initialize system clock
 * */
void SystemClock_config()
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION;				// enable HSI
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <SystemClock_config+0x68>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a17      	ldr	r2, [pc, #92]	; (800023c <SystemClock_config+0x68>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));		// see that HSI is ready or not
 80001e4:	bf00      	nop
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <SystemClock_config+0x68>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <SystemClock_config+0x12>

	// Power regulator
	PWR->CR |= (1<<15);
 80001f2:	4b13      	ldr	r3, [pc, #76]	; (8000240 <SystemClock_config+0x6c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <SystemClock_config+0x6c>)
 80001f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001fc:	6013      	str	r3, [r2, #0]

	// Flash latency setup
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <SystemClock_config+0x70>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a10      	ldr	r2, [pc, #64]	; (8000244 <SystemClock_config+0x70>)
 8000204:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000208:	f043 0305 	orr.w	r3, r3, #5
 800020c:	6013      	str	r3, [r2, #0]

	// Clock configuration register for setting
	RCC->CFGR |= RCC_CFGR_SW_HSI;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SystemClock_config+0x68>)
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <SystemClock_config+0x68>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	6093      	str	r3, [r2, #8]
	while ( (RCC->CFGR & (1<<2)) || (RCC->CFGR & (1<<3)) );
 8000216:	bf00      	nop
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <SystemClock_config+0x68>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	f003 0304 	and.w	r3, r3, #4
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1f9      	bne.n	8000218 <SystemClock_config+0x44>
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <SystemClock_config+0x68>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	f003 0308 	and.w	r3, r3, #8
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f3      	bne.n	8000218 <SystemClock_config+0x44>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	40023800 	.word	0x40023800
 8000240:	40007000 	.word	0x40007000
 8000244:	40023c00 	.word	0x40023c00

08000248 <Timer1_init>:

/*
 * Initialize Timer 1
 * */
void Timer1_init()
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
	uint32_t F_timer, prescaler;

	// F_timer = f_PCLK / (PSC + 1)
	F_timer = 1 / T_timer;
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	607b      	str	r3, [r7, #4]
	prescaler = f_PCLK / F_timer - 1;
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <Timer1_init+0x5c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	fbb2 f3f3 	udiv	r3, r2, r3
 800025c:	3b01      	subs	r3, #1
 800025e:	603b      	str	r3, [r7, #0]

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; 		// TIM1 clock enable
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <Timer1_init+0x60>)
 8000262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <Timer1_init+0x60>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC |= prescaler;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <Timer1_init+0x64>)
 800026e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000270:	490e      	ldr	r1, [pc, #56]	; (80002ac <Timer1_init+0x64>)
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	4313      	orrs	r3, r2
 8000276:	628b      	str	r3, [r1, #40]	; 0x28

	TIM1->ARR = AutoReload;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <Timer1_init+0x64>)
 800027a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800027e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CR1 |= TIM_CR1_CEN;					// Counter enable
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <Timer1_init+0x64>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <Timer1_init+0x64>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1<<4);						// Counter used as up counter
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <Timer1_init+0x64>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <Timer1_init+0x64>)
 8000292:	f023 0310 	bic.w	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	00f42400 	.word	0x00f42400
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40010000 	.word	0x40010000

080002b0 <delay_ms>:

/*
 * delay by ms
 * */
void delay_ms(int ms)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	TIM1->CNT = 0;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <delay_ms+0x28>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM1->CNT < ms);
 80002be:	bf00      	nop
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <delay_ms+0x28>)
 80002c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d3fa      	bcc.n	80002c0 <delay_ms+0x10>
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	40010000 	.word	0x40010000

080002dc <USART1_init>:



/* Initializing USART */
void USART1_init()
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
	uint32_t USART_DIV, DIV_Mantissa, DIV_Fraction;

	RCC->APB2ENR |= (1<<4); 					// USART1 clock enable
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <USART1_init+0x80>)
 80002e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e6:	4a1d      	ldr	r2, [pc, #116]	; (800035c <USART1_init+0x80>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6453      	str	r3, [r2, #68]	; 0x44

	USART1->CR1 |= (1<<3); 						// transmit enable
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <USART1_init+0x84>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <USART1_init+0x84>)
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1<<13);						// USART enable
 80002fa:	4b19      	ldr	r3, [pc, #100]	; (8000360 <USART1_init+0x84>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <USART1_init+0x84>)
 8000300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000304:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1<<12);					// 1 Start bit, 8 Data bits, n Stop bit
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <USART1_init+0x84>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <USART1_init+0x84>)
 800030c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000310:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1<<10);					// no parity
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <USART1_init+0x84>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <USART1_init+0x84>)
 8000318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800031c:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(2<<12);					// 1 stop bit
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <USART1_init+0x84>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <USART1_init+0x84>)
 8000324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000328:	6113      	str	r3, [r2, #16]
	/*
	 * USART_DIV = PCLK1 / (baud * 16)
	 * 			 = 16,000,000 / (9600 * 16)
	 * 			 = 104.16667
	 * */
	USART_DIV = f_PCLK / (baudrate * 16);
 800032a:	2368      	movs	r3, #104	; 0x68
 800032c:	60fb      	str	r3, [r7, #12]
	DIV_Mantissa = USART_DIV;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	60bb      	str	r3, [r7, #8]
	DIV_Fraction = (USART_DIV - DIV_Mantissa) * 16;
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	607b      	str	r3, [r7, #4]
	USART1->BRR |= (DIV_Mantissa<<4) | (DIV_Fraction);
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <USART1_init+0x84>)
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	0119      	lsls	r1, r3, #4
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	430b      	orrs	r3, r1
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <USART1_init+0x84>)
 800034a:	4313      	orrs	r3, r2
 800034c:	608b      	str	r3, [r1, #8]
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40011000 	.word	0x40011000

08000364 <USART1_sendData>:



/* transmit sequence data */
void USART1_sendData(char *p)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	while (*p != '\0')
 800036c:	e00d      	b.n	800038a <USART1_sendData+0x26>
	{
		USART1->DR = *p;						// load data
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781a      	ldrb	r2, [r3, #0]
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <USART1_sendData+0x3c>)
 8000374:	605a      	str	r2, [r3, #4]
		while ((USART1->SR & (1<<6)) == 0);		// wait until Transmission is complete
 8000376:	bf00      	nop
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <USART1_sendData+0x3c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f9      	beq.n	8000378 <USART1_sendData+0x14>
		p++;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
	while (*p != '\0')
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1ed      	bne.n	800036e <USART1_sendData+0xa>
	}
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40011000 	.word	0x40011000

080003a4 <main>:
void GPIO_init();



int main()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	SystemClock_config();
 80003a8:	f7ff ff14 	bl	80001d4 <SystemClock_config>
	GPIO_init();
 80003ac:	f000 f80e 	bl	80003cc <GPIO_init>
	Timer1_init();
 80003b0:	f7ff ff4a 	bl	8000248 <Timer1_init>
	USART1_init();
 80003b4:	f7ff ff92 	bl	80002dc <USART1_init>

	while(1)
	{
		USART1_sendData("danh21\r\n");
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <main+0x24>)
 80003ba:	f7ff ffd3 	bl	8000364 <USART1_sendData>
		delay_ms(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f7ff ff75 	bl	80002b0 <delay_ms>
		USART1_sendData("danh21\r\n");
 80003c6:	e7f7      	b.n	80003b8 <main+0x14>
 80003c8:	080004c8 	.word	0x080004c8

080003cc <GPIO_init>:



/* Initializing GPIO */
void GPIO_init(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);		// IO port A clock enable
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <GPIO_init+0x40>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <GPIO_init+0x40>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (2<<18);	// alternate function for PA9
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <GPIO_init+0x44>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <GPIO_init+0x44>)
 80003e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e6:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (2<<18);	// high speed for PA9
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <GPIO_init+0x44>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4a08      	ldr	r2, [pc, #32]	; (8000410 <GPIO_init+0x44>)
 80003ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f2:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[1] |= (7<<4);	// USART mode for PA9
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <GPIO_init+0x44>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <GPIO_init+0x44>)
 80003fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003fe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800
 8000410:	40020000 	.word	0x40020000

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff ffad 	bl	80003a4 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	2000001c 	.word	0x2000001c

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	; (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	; (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	; (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004d4 	.word	0x080004d4
 80004a4:	080004d4 	.word	0x080004d4
 80004a8:	080004d4 	.word	0x080004d4
 80004ac:	080004d8 	.word	0x080004d8

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
